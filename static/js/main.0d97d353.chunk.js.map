{"version":3,"sources":["components/table/components/button/Button.module.css","components/table/Table.module.css","components/table/components/col/Col.module.css","components/table/components/row/components/add-row/AddRow.module.css","components/table/components/tech-row/components/add-col/AddCol.module.css","components/table/components/col/components/text-edit/TextEdit.module.css","components/table/components/row/components/remove-row/RemoveRow.module.css","components/table/components/row/Row.module.css","components/table/components/tech-row/components/remove-col/RemoveCol.module.css","components/table/components/tech-row/components/tech-col/TechCol.module.css","components/table/duck/context.ts","components/table/duck/state.ts","components/table/duck/actions.ts","components/table/duck/utils.ts","components/table/duck/reducer.ts","components/table/duck/constants.ts","components/table/components/col/components/text-edit/TextEdit.tsx","components/table/components/col/Col.tsx","components/table/components/row/components/add-row/duck/utils.ts","components/table/components/row/components/add-row/AddRow.tsx","components/table/components/row/components/remove-row/assets/close-circle.svg","components/table/components/row/components/remove-row/RemoveRow.tsx","components/table/components/row/Row.tsx","components/table/components/button/Button.tsx","components/table/components/selection-menu/components/merge/Merge.tsx","components/table/components/selection-menu/components/merge/duck/operations.ts","components/table/components/selection-menu/components/change-background/ChangeBackground.tsx","components/table/components/selection-menu/assets/setting.svg","components/table/components/selection-menu/SelectionMenu.tsx","components/table/components/selection-menu/duck/utils.ts","components/table/components/tech-row/duck/utils.ts","components/table/components/tech-row/components/add-col/AddCol.tsx","components/table/components/tech-row/components/remove-col/assets/close-circle.svg","components/table/components/tech-row/components/remove-col/RemoveCol.tsx","components/table/components/tech-row/components/tech-col/TechCol.tsx","components/table/components/tech-row/TechRow.tsx","components/table/Table.tsx","App.tsx","index.tsx","components/table/components/selection-menu/components/change-background/ChangeBackground.module.css","components/table/components/selection-menu/SelectionMenu.module.css"],"names":["module","exports","TableContext","React","tableState","touched","selectionState","selectedCols","selected","rows","id","cols","content","type","display","setStartSelection","createStandardAction","setEndSelection","clearSelection","rowsUpdate","updateColContent","updateColBackground","selectRow","removeRow","selectCol","removeCol","getRange","start","end","row","min","rowId","max","col","colId","belongs","current","range","tableReducer","createReducer","initialState","handleAction","actions","state","positionStart","payload","positionEnd","finished","r","c","push","allocatedRow","map","length","newRows","splice","index","forEach","background","newCols","emptyCol","BACKGROUND_COLORS","TextEdit","value","setEditMode","dispatch","useContext","inputRef","useRef","useEffect","focus","editHandler","e","target","ref","defaultValue","onBlur","onKeyDown","code","className","styles","wrapper","style","Col","colData","useState","setSelected","editMode","onMouseDown","onMouseUp","onMouseEnter","onDoubleClick","colSpan","rowSpan","classNames","generateNewRows","colCount","newRow","Array","fill","AddRow","addButton","onClick","stopPropagation","RemoveRow","setRowSelected","src","icon","alt","Row","rowData","rowSelected","height","techCol","onOutsideClick","Button","children","active","disabled","Merge","selectedCellCounts","setSelectedCellCounts","getCellCount","targetCol","mergeCols","ChangeBackground","changeColorHandler","color","colors","undefined","colorButton","transparent","SelectionMenu","position","setPosition","opened","setOpened","cell","document","getElementById","top","offsetTop","left","offsetLeft","getMenuPosition","settingButton","menu","generateRowsWithNewCol","newCol","AddCol","RemoveCol","setColSelected","TechCol","colSelected","TechRow","setCols","count","getColCount","width","Table","onChange","useReducer","Provider","table","filled","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0d97d353.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Button_wrapper__pj90c\",\"active\":\"Button_active__FWtIw\",\"disabled\":\"Button_disabled__1AAMG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Table_wrapper__2oJSk\",\"table\":\"Table_table__3Cw9e\",\"filled\":\"Table_filled__wq5i1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Col_wrapper__3FddR\",\"selected\":\"Col_selected__29n3t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"AddRow_wrapper__3NW4Q\",\"addButton\":\"AddRow_addButton__1hGob\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"AddCol_wrapper__OkM3j\",\"addButton\":\"AddCol_addButton__2VG6f\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"TextEdit_wrapper__3ANjp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"RemoveRow_wrapper__QxJap\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"techCol\":\"Row_techCol__HSNZB\",\"active\":\"Row_active__1oG0c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"RemoveCol_wrapper__2M4QV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"techCol\":\"TechCol_techCol__3-ePx\"};","import * as React from \"react\";\nimport { SketchContext as SketchContextType } from \"./types\";\n\nexport const TableContext = React.createContext<SketchContextType>(\n  null as any\n);\n","import { TableState } from \"./types\";\n\nconst tableState: TableState = {\n  touched: false,\n  selectionState: {\n    selectedCols: [],\n    selected: false,\n  },\n  rows: [\n    {\n      id: 1,\n      cols: [\n        {\n          content: \"\",\n          type: \"text\",\n          display: true,\n          id: 1,\n        },\n        {\n          content: \"\",\n          type: \"text\",\n          display: true,\n          id: 2,\n        },\n      ],\n    },\n  ],\n};\n\nexport default tableState;\n","import { createStandardAction } from \"typesafe-actions\";\nimport { PositionStateType, RowType, SelectionStateType } from \"./types\";\n\nexport const setStartSelection = createStandardAction(\n  \"TABLE/SET_START_SELECTION\"\n)<{\n  positionStart: PositionStateType;\n}>();\n\nexport const setEndSelection = createStandardAction(\"TABLE/SET_END_SELECTION\")<{\n  positionEnd: PositionStateType;\n  finished: boolean;\n}>();\n\nexport const clearSelection = createStandardAction(\"TABLE/CLEAR_SELECTION\")();\n\nexport const rowsUpdate = createStandardAction(\"TABLE/ROWS_UPDATE\")<{\n  rows: RowType[];\n}>();\n\nexport const updateColContent = createStandardAction(\n  \"TABLE/UPDATE_COL_CONTENT\"\n)<{\n  rowId: number;\n  colId: number;\n  content: string;\n}>();\n\nexport const updateColBackground = createStandardAction(\n  \"TABLE/UPDATE_COL_BACKGROUND\"\n)<{\n  selectionState: SelectionStateType;\n  background: string | undefined;\n}>();\n\nexport const selectRow = createStandardAction(\"TABLE/SELECT_ROW\")<{\n  rowId: number;\n}>();\n\nexport const removeRow = createStandardAction(\"TABLE/REMOVE_ROW\")<{\n  rowId: number;\n}>();\n\nexport const selectCol = createStandardAction(\"TABLE/SELECT_COL\")<{\n  colId: number;\n}>();\n\nexport const removeCol = createStandardAction(\"TABLE/REMOVE_COL\")<{\n  colId: number;\n}>();\n","import { PositionStateType, RangeType, SelectionStateType } from \"./types\";\n\nexport const getRange = (\n  start: PositionStateType,\n  end: PositionStateType\n): RangeType => ({\n  row: {\n    min: start.rowId < end.rowId ? start.rowId : end.rowId,\n    max: start.rowId < end.rowId ? end.rowId : start.rowId,\n  },\n  col: {\n    min: start.colId < end.colId ? start.colId : end.colId,\n    max: start.colId < end.colId ? end.colId : start.colId,\n  },\n});\n\nexport const belongs = (\n  start: PositionStateType,\n  end: PositionStateType,\n  current: PositionStateType\n): boolean => {\n  const range = getRange(start, end);\n\n  return (\n    current.rowId >= range.row.min &&\n    current.rowId <= range.row.max &&\n    current.colId >= range.col.min &&\n    current.colId <= range.col.max\n  );\n};\n\nexport const getCellCount = (selectionState: SelectionStateType): number => {\n  if (selectionState.start && selectionState.end) {\n    const range = getRange(selectionState.start, selectionState.end);\n\n    return (\n      (range.row.max - range.row.min + 1) * (range.col.max - range.col.min + 1)\n    );\n  }\n\n  return 0;\n};\n","import { createReducer, ActionType } from \"typesafe-actions\";\nimport initialState from \"./state\";\nimport * as actions from \"./actions\";\nimport * as Types from \"./types\";\nimport { ColType, PositionStateType, RowType } from \"./types\";\nimport { belongs } from \"./utils\";\n\ntype Action = ActionType<typeof actions>;\n\nconst tableReducer = createReducer<Types.TableState, Action>(initialState)\n  .handleAction(\n    actions.setStartSelection,\n    (state, { payload: { positionStart } }) => ({\n      ...state,\n      touched: true,\n      selectionState: {\n        selectedCols: [],\n        selected: false,\n        start: positionStart,\n      },\n    })\n  )\n  .handleAction(\n    actions.setEndSelection,\n    (state, { payload: { positionEnd, finished } }) => {\n      const selectedCols: PositionStateType[] = [];\n\n      if (finished && state.selectionState.start) {\n        for (\n          let r = state.selectionState.start.rowId;\n          r <= positionEnd.rowId;\n          r += 1\n        ) {\n          const col = { rowId: r };\n\n          for (\n            let c = state.selectionState.start.colId;\n            c <= positionEnd.colId;\n            c += 1\n          ) {\n            selectedCols.push({ ...col, colId: c });\n          }\n        }\n      }\n\n      return {\n        ...state,\n        ...(finished ? { touched: false } : {}),\n        selectionState: {\n          ...state.selectionState,\n          selectedCols,\n          ...(finished ? { selected: true } : {}),\n          end: positionEnd,\n        },\n      };\n    }\n  )\n  .handleAction(actions.clearSelection, (state) => ({\n    ...state,\n    selectionState: {\n      selectedCols: [],\n      selected: false,\n    },\n  }))\n  .handleAction(actions.rowsUpdate, (state, { payload: { rows } }) => ({\n    ...state,\n    rows,\n  }))\n  .handleAction(actions.selectRow, (state, { payload: { rowId } }) => {\n    const allocatedRow = state.rows[rowId - 1];\n\n    const selectedCols = allocatedRow.cols.map((col: ColType) => ({\n      rowId,\n      colId: col.id,\n    }));\n\n    return {\n      ...state,\n      selectionState: {\n        selected: true,\n        selectedCols,\n        start: { rowId, colId: allocatedRow.cols[0].id },\n        end: {\n          rowId,\n          colId: allocatedRow.cols[allocatedRow.cols.length - 1].id,\n        },\n      },\n    };\n  })\n  .handleAction(actions.selectCol, (state, { payload: { colId } }) => {\n    const selectedCols: PositionStateType[] = [];\n\n    for (let r = 1; r <= state.rows.length; r += 1) {\n      selectedCols.push({ rowId: r, colId });\n    }\n\n    return {\n      ...state,\n      selectionState: {\n        selected: true,\n        selectedCols,\n        start: { rowId: state.rows[0].id, colId },\n        end: {\n          rowId: state.rows[state.rows.length - 1].id,\n          colId,\n        },\n      },\n    };\n  })\n  .handleAction(actions.removeRow, (state, { payload: { rowId } }) => {\n    const newRows = state.rows;\n    newRows.splice(rowId - 1, 1);\n\n    return {\n      ...state,\n      selectionState: {\n        selectedCols: [],\n        selected: false,\n      },\n      rows: newRows.map((row: RowType, index: number) => ({\n        ...row,\n        id: index + 1,\n      })),\n    };\n  })\n  .handleAction(actions.removeCol, (state, { payload: { colId } }) => {\n    const newRows = state.rows;\n\n    newRows.forEach((row: RowType) => {\n      row.cols.splice(colId - 1, 1);\n      row.cols = row.cols.map((col: ColType, index) => ({\n        ...col,\n        id: index + 1,\n      }));\n    });\n\n    return {\n      ...state,\n      selectionState: {\n        selectedCols: [],\n        selected: false,\n      },\n      rows: newRows.map((row: RowType, index: number) => ({\n        ...row,\n        id: index + 1,\n      })),\n    };\n  })\n  .handleAction(\n    actions.updateColContent,\n    (state, { payload: { colId, rowId, content } }) => {\n      const { rows } = state;\n\n      rows[rowId - 1].cols[colId - 1].content = content;\n\n      return {\n        ...state,\n        rows,\n      };\n    }\n  )\n  .handleAction(\n    actions.updateColBackground,\n    (state, { payload: { selectionState, background } }) => {\n      const { rows } = state;\n\n      const newRows = rows.map((row: RowType) => {\n        const newCols = row.cols.map((col: ColType) => {\n          if (\n            selectionState.start &&\n            selectionState.end &&\n            belongs(selectionState.start, selectionState.end, {\n              rowId: row.id,\n              colId: col.id,\n            })\n          ) {\n            return { ...col, background };\n          }\n\n          return col;\n        });\n\n        return { ...row, cols: newCols };\n      });\n\n      return {\n        ...state,\n        rows: newRows,\n      };\n    }\n  );\n\nexport default tableReducer;\n","export const emptyCol = { content: \"\", type: \"text\", display: true };\n\nexport const ROW_HEIGHT = 45;\n\nexport const BACKGROUND_COLORS = [\n  \"#fff1b8\",\n  \"#ffffb8\",\n  \"#f4ffb8\",\n  \"#d9f7be\",\n  \"#b5f5ec\",\n  \"#bae7ff\",\n  \"#d6e4ff\",\n  \"#efdbff\",\n  \"#ffccc7\",\n];\n","import React, { useRef } from \"react\";\nimport { updateColContent } from \"../../../../duck/actions\";\nimport { TableContext } from \"../../../../duck/context\";\nimport styles from \"./TextEdit.module.css\";\n\ninterface TextEditType {\n  value: string;\n  rowId: number;\n  colId: number;\n  background?: string;\n  setEditMode: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nconst TextEdit: React.FC<TextEditType> = ({\n  value,\n  colId,\n  rowId,\n  background,\n  setEditMode,\n}) => {\n  const { dispatch } = React.useContext(TableContext);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  React.useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, []);\n\n  const editHandler = (e: any) => {\n    dispatch(updateColContent({ rowId, colId, content: e.target.value }));\n    setEditMode(false);\n  };\n\n  const keyDownHandler = (e: any) => {\n    if (e.code === \"Enter\") {\n      editHandler(e);\n    }\n  };\n\n  return (\n    <input\n      ref={inputRef}\n      defaultValue={value}\n      onBlur={editHandler}\n      onKeyDown={keyDownHandler}\n      className={styles.wrapper}\n      style={{ background }}\n    />\n  );\n};\n\nexport default TextEdit;\n","import React, { useRef } from \"react\";\nimport classNames from \"classnames\";\nimport { ColType as ColDataType } from \"../../duck/types\";\nimport { TableContext } from \"../../duck/context\";\nimport { setEndSelection, setStartSelection } from \"../../duck/actions\";\nimport { belongs } from \"../../duck/utils\";\nimport { TextEdit } from \"./components\";\nimport styles from \"./Col.module.css\";\n\ninterface ColType {\n  colData: ColDataType;\n  rowId: number;\n}\n\nconst Col: React.FC<ColType> = ({ colData, rowId }) => {\n  const [selected, setSelected] = React.useState<boolean>(false);\n  const [editMode, setEditMode] = React.useState<boolean>(false);\n  const { state, dispatch } = React.useContext(TableContext);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  React.useEffect(() => {\n    if (state.selectionState.start && state.selectionState.end) {\n      setSelected(\n        belongs(state.selectionState.start, state.selectionState.end, {\n          rowId,\n          colId: colData.id,\n        })\n      );\n    } else {\n      setSelected(false);\n    }\n  }, [state, rowId, colData, inputRef]);\n\n  if (!colData.display) {\n    return null;\n  }\n\n  const selectStartHandler = () => {\n    dispatch(\n      setStartSelection({ positionStart: { rowId, colId: colData.id } })\n    );\n  };\n\n  const selectEndHandler = () => {\n    dispatch(\n      setEndSelection({\n        positionEnd: { rowId, colId: colData.id },\n        finished: true,\n      })\n    );\n  };\n\n  const selectUpdateHandler = () => {\n    if (state.touched) {\n      dispatch(\n        setEndSelection({\n          positionEnd: { rowId, colId: colData.id },\n          finished: false,\n        })\n      );\n    }\n  };\n\n  return (\n    <td\n      id={`col-${rowId}-${colData.id}`}\n      onMouseDown={selectStartHandler}\n      onMouseUp={selectEndHandler}\n      onMouseEnter={selectUpdateHandler}\n      onDoubleClick={() => setEditMode(true)}\n      colSpan={colData.colSpan}\n      rowSpan={colData.rowSpan}\n      className={classNames(styles.wrapper, { [styles.selected]: selected })}\n      style={{ background: colData.background }}\n    >\n      {editMode && colData.type === \"text\" && (\n        <TextEdit\n          value={colData.content}\n          background={colData.background}\n          rowId={rowId}\n          colId={colData.id}\n          setEditMode={setEditMode}\n        />\n      )}\n      {!editMode && colData.content}\n    </td>\n  );\n};\n\nexport default Col;\n","import { emptyCol } from \"../../../../../duck/constants\";\nimport { RowType } from \"../../../../../duck/types\";\n\nexport const generateNewRows = (rows: RowType[], rowId: number): RowType[] => {\n  const colCount = rows[0] ? rows[0].cols.length : 1;\n\n  const newRow: RowType = {\n    id: rowId + 1,\n    cols: Array(colCount)\n      .fill(emptyCol)\n      .map((col, index) => ({ ...col, id: index + 1 })),\n  };\n\n  const newRows = rows.map((row: RowType) => {\n    if (row.id > rowId) {\n      return { ...row, id: row.id + 1 };\n    }\n    return row;\n  });\n\n  newRows.splice(rowId, 0, newRow);\n\n  return newRows;\n};\n","import React from \"react\";\nimport { TableContext } from \"../../../../duck/context\";\nimport { rowsUpdate } from \"../../../../duck/actions\";\nimport { generateNewRows } from \"./duck/utils\";\nimport styles from \"./AddRow.module.css\";\n\ninterface AddRowType {\n  rowId: number;\n}\n\nconst AddRow: React.FC<AddRowType> = ({ rowId }) => {\n  const { dispatch, state } = React.useContext(TableContext);\n\n  const addNewRowHandler = (e: any) => {\n    e.stopPropagation();\n    dispatch(rowsUpdate({ rows: generateNewRows(state.rows, rowId) }));\n  };\n\n  return (\n    <div className={styles.wrapper}>\n      <button className={styles.addButton} onClick={addNewRowHandler}>\n        +\n      </button>\n    </div>\n  );\n};\n\nexport default AddRow;\n","export default __webpack_public_path__ + \"static/media/close-circle.50ed0904.svg\";","import React from \"react\";\nimport { TableContext } from \"../../../../duck/context\";\nimport { removeRow } from \"../../../../duck/actions\";\nimport icon from \"./assets/close-circle.svg\";\nimport styles from \"./RemoveRow.module.css\";\n\ninterface RemoveRowType {\n  rowId: number;\n  setRowSelected: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nconst RemoveRow: React.FC<RemoveRowType> = ({ rowId, setRowSelected }) => {\n  const { dispatch } = React.useContext(TableContext);\n\n  const removeRowHandler = (e: any) => {\n    e.stopPropagation();\n    dispatch(removeRow({ rowId }));\n    setRowSelected(false);\n  };\n\n  return (\n    <button className={styles.wrapper} onClick={removeRowHandler}>\n      <img src={icon} alt=\"\" />\n    </button>\n  );\n};\n\nexport default RemoveRow;\n","import React from \"react\";\nimport OutsideClickHandler from \"react-outside-click-handler\";\nimport { RowType as RowDataType, ColType } from \"../../duck/types\";\nimport { TableContext } from \"../../duck/context\";\nimport { selectRow } from \"../../duck/actions\";\nimport { ROW_HEIGHT } from \"../../duck/constants\";\nimport Col from \"../col\";\nimport { AddRow, RemoveRow } from \"./components\";\nimport styles from \"./Row.module.css\";\n\ninterface RowType {\n  rowData: RowDataType;\n}\n\nconst Row: React.FC<RowType> = ({ rowData }) => {\n  const [rowSelected, setRowSelected] = React.useState(false);\n  const { state, dispatch } = React.useContext(TableContext);\n\n  const selectRowHandler = () => {\n    setRowSelected(true);\n    dispatch(selectRow({ rowId: rowData.id }));\n  };\n\n  const outsideClickHandler = () => {\n    setRowSelected(false);\n  };\n\n  return (\n    <tr style={{ height: rowData.height || ROW_HEIGHT }}>\n      <td className={styles.techCol} onClick={selectRowHandler}>\n        <AddRow rowId={rowData.id} />\n        {rowSelected && state.rows.length > 1 && (\n          <OutsideClickHandler onOutsideClick={outsideClickHandler}>\n            <RemoveRow rowId={rowData.id} setRowSelected={setRowSelected} />\n          </OutsideClickHandler>\n        )}\n      </td>\n      {rowData.cols.map((col: ColType) => (\n        <Col key={col.id} colData={col} rowId={rowData.id} />\n      ))}\n    </tr>\n  );\n};\n\nexport default Row;\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport styles from \"./Button.module.css\";\n\ninterface ButtonType {\n  onClick?: () => any;\n  onBlur?: () => any;\n  className?: string;\n  active?: boolean;\n  style?: any;\n  disabled?: boolean;\n}\n\nconst Button: React.FC<ButtonType> = ({\n  children,\n  onClick,\n  onBlur,\n  className,\n  style,\n  active = false,\n  disabled = false,\n}) => (\n  <button\n    disabled={disabled}\n    onClick={onClick}\n    onBlur={onBlur}\n    className={classNames(styles.wrapper, className, {\n      [styles.active]: active,\n      [styles.disabled]: disabled,\n    })}\n    style={style}\n  >\n    {children}\n  </button>\n);\n\nexport default Button;\n","import React from \"react\";\nimport { TableContext } from \"../../../../duck/context\";\nimport { getCellCount } from \"../../../../duck/utils\";\nimport { mergeCols } from \"./duck/operations\";\n\nconst Merge: React.FC = () => {\n  const [selectedCellCounts, setSelectedCellCounts] = React.useState(0);\n  const { state, dispatch } = React.useContext(TableContext);\n\n  React.useEffect(() => {\n    setSelectedCellCounts(getCellCount(state.selectionState));\n  }, [state]);\n\n  const mergeHandler = () => {\n    mergeCols(state, dispatch);\n  };\n\n  return (\n    <li>\n      <button disabled={selectedCellCounts <= 1} onClick={mergeHandler}>\n        Merge\n      </button>\n    </li>\n  );\n};\n\nexport default Merge;\n","import {\n  AnyDispatch,\n  ColType,\n  PositionStateType,\n  RowType,\n  TableState,\n} from \"../../../../../duck/types\";\nimport { belongs, getRange } from \"../../../../../duck/utils\";\nimport { clearSelection, rowsUpdate } from \"../../../../../duck/actions\";\n\nexport const mergeCols = (state: TableState, dispatch: AnyDispatch): void => {\n  const { selectionState, rows } = state;\n\n  if (selectionState.end && selectionState.start) {\n    const range = getRange(selectionState.start, selectionState.end);\n    const colSpan = range.col.max + 1 - range.col.min;\n    const rowSpan = range.row.max + 1 - range.row.min;\n    const targetCol = { row: range.row.min, col: range.col.min };\n\n    if (colSpan > 1) {\n      rows[targetCol.row - 1].cols[targetCol.col - 1].colSpan = colSpan;\n    }\n\n    if (rowSpan > 1) {\n      rows[targetCol.row - 1].cols[targetCol.col - 1].rowSpan = rowSpan;\n    }\n\n    rows.forEach((row: RowType) => {\n      row.cols = row.cols.map((col: ColType) => {\n        if (\n          belongs(\n            selectionState.start as PositionStateType,\n            selectionState.end as PositionStateType,\n            {\n              rowId: row.id,\n              colId: col.id,\n            }\n          ) &&\n          !(targetCol.row === row.id && targetCol.col === col.id)\n        ) {\n          return { ...col, display: false };\n        }\n\n        return col;\n      });\n    });\n\n    dispatch(rowsUpdate({ rows }));\n    dispatch(clearSelection());\n  }\n};\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport { BACKGROUND_COLORS } from \"../../../../duck/constants\";\nimport { TableContext } from \"../../../../duck/context\";\nimport { updateColBackground } from \"../../../../duck/actions\";\nimport styles from \"./ChangeBackground.module.css\";\n\nconst ChangeBackground: React.FC = () => {\n  const { state, dispatch } = React.useContext(TableContext);\n\n  const changeColorHandler = (color: string | undefined) => {\n    dispatch(\n      updateColBackground({\n        selectionState: state.selectionState,\n        background: color,\n      })\n    );\n  };\n\n  return (\n    <li className={styles.wrapper}>\n      <button>Background color</button>\n      <div className={styles.colors}>\n        <button\n          onClick={() => changeColorHandler(undefined)}\n          className={classNames(styles.colorButton, styles.transparent)}\n        />\n        {BACKGROUND_COLORS.map((color: string) => (\n          <button\n            onClick={() => changeColorHandler(color)}\n            key={color}\n            style={{ background: color }}\n            className={styles.colorButton}\n          />\n        ))}\n      </div>\n    </li>\n  );\n};\n\nexport default ChangeBackground;\n","export default __webpack_public_path__ + \"static/media/setting.5524b19c.svg\";","import React from \"react\";\nimport classNames from \"classnames\";\nimport OutsideClickHandler from \"react-outside-click-handler\";\nimport { TableContext } from \"../../duck/context\";\nimport Button from \"../button\";\nimport { getMenuPosition, PositionType } from \"./duck/utils\";\nimport { Merge, ChangeBackground } from \"./components\";\nimport icon from \"./assets/setting.svg\";\nimport styles from \"./SelectionMenu.module.css\";\n\nconst SelectionMenu: React.FC = () => {\n  const { state } = React.useContext(TableContext);\n  const [position, setPosition] = React.useState<PositionType>();\n  const [opened, setOpened] = React.useState<boolean>(false);\n\n  React.useEffect(() => {\n    if (state.selectionState.start && state.selectionState.end) {\n      setPosition(\n        getMenuPosition(state.selectionState.start, state.selectionState.end)\n      );\n    }\n  }, [state]);\n\n  return (\n    <div\n      className={classNames(styles.wrapper, {\n        [styles.selected]: state.selectionState.selected,\n      })}\n      style={position}\n    >\n      <Button\n        onClick={() => setOpened(!opened)}\n        className={styles.settingButton}\n      >\n        <img src={icon} alt=\"\" />\n      </Button>\n      {opened && (\n        <OutsideClickHandler onOutsideClick={() => setOpened(false)}>\n          <ul className={styles.menu}>\n            <ChangeBackground />\n            <Merge />\n          </ul>\n        </OutsideClickHandler>\n      )}\n    </div>\n  );\n};\n\nexport default SelectionMenu;\n","import { getRange } from \"../../../duck/utils\";\nimport { PositionStateType } from \"../../../duck/types\";\n\nexport interface PositionType {\n  top: number;\n  left: number;\n}\n\nexport const getMenuPosition = (\n  start: PositionStateType,\n  end: PositionStateType\n): PositionType => {\n  const range = getRange(start, end);\n  const cell = document.getElementById(`col-${range.row.min}-${range.col.min}`);\n\n  if (cell) {\n    return {\n      top: cell.offsetTop + 5,\n      left: cell.offsetLeft + 5,\n    };\n  }\n\n  return {\n    top: 0,\n    left: 0,\n  };\n};\n","import { ColType, RowType } from \"../../../duck/types\";\nimport { emptyCol } from \"../../../duck/constants\";\n\nexport const generateRowsWithNewCol = (\n  rows: RowType[],\n  colId: number\n): RowType[] =>\n  rows.map((row: RowType) => {\n    const newCols = row.cols.map((col: ColType) => {\n      if (col.id > colId) {\n        return { ...col, id: col.id + 1 };\n      }\n      return col;\n    });\n\n    const newCol = { id: colId + 1, ...emptyCol };\n\n    newCols.splice(colId, 0, newCol);\n\n    return {\n      ...row,\n      cols: newCols,\n    };\n  });\n\nexport const getColCount = (rows: RowType[]): number => {\n  let count = 0;\n\n  rows.forEach((row: RowType) => {\n    if (row.cols.length > count) {\n      count = row.cols.length;\n    }\n  });\n\n  return count;\n};\n","import React from \"react\";\nimport { TableContext } from \"../../../../duck/context\";\nimport { rowsUpdate } from \"../../../../duck/actions\";\nimport { generateRowsWithNewCol } from \"../../duck/utils\";\nimport styles from \"./AddCol.module.css\";\n\ninterface AddColType {\n  colId: number;\n}\n\nconst AddCol: React.FC<AddColType> = ({ colId }) => {\n  const { dispatch, state } = React.useContext(TableContext);\n\n  const addColHandler = (e: any): void => {\n    e.stopPropagation();\n    dispatch(rowsUpdate({ rows: generateRowsWithNewCol(state.rows, colId) }));\n  };\n\n  return (\n    <div className={styles.wrapper}>\n      <button className={styles.addButton} onClick={addColHandler}>\n        +\n      </button>\n    </div>\n  );\n};\n\nexport default AddCol;\n","export default __webpack_public_path__ + \"static/media/close-circle.50ed0904.svg\";","import React from \"react\";\nimport { TableContext } from \"../../../../duck/context\";\nimport { removeCol } from \"../../../../duck/actions\";\nimport icon from \"./assets/close-circle.svg\";\nimport styles from \"./RemoveCol.module.css\";\n\ninterface RemoveColType {\n  colId: number;\n  setColSelected: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nconst RemoveCol: React.FC<RemoveColType> = ({ colId, setColSelected }) => {\n  const { dispatch } = React.useContext(TableContext);\n\n  const removeRowHandler = (e: any) => {\n    e.stopPropagation();\n    dispatch(removeCol({ colId }));\n    setColSelected(false);\n  };\n\n  return (\n    <button className={styles.wrapper} onClick={removeRowHandler}>\n      <img src={icon} alt=\"\" />\n    </button>\n  );\n};\n\nexport default RemoveCol;\n","import React from \"react\";\nimport OutsideClickHandler from \"react-outside-click-handler\";\nimport { TableContext } from \"../../../../duck/context\";\nimport { selectCol } from \"../../../../duck/actions\";\nimport AddCol from \"../add-col\";\nimport RemoveCol from \"../remove-col\";\nimport styles from \"./TechCol.module.css\";\n\ninterface TechColType {\n  colId: number;\n}\n\nconst TechCol: React.FC<TechColType> = ({ colId }) => {\n  const { state, dispatch } = React.useContext(TableContext);\n  const [colSelected, setColSelected] = React.useState(false);\n\n  const selectColHandler = () => {\n    setColSelected(true);\n    dispatch(selectCol({ colId }));\n  };\n\n  const outsideClickHandler = () => {\n    setColSelected(false);\n  };\n\n  return (\n    <td key={colId} onClick={selectColHandler} className={styles.techCol}>\n      <AddCol colId={colId} />\n      {state.rows[0].cols.length > 1 && colSelected && (\n        <OutsideClickHandler onOutsideClick={outsideClickHandler}>\n          <RemoveCol colId={colId} setColSelected={setColSelected} />\n        </OutsideClickHandler>\n      )}\n    </td>\n  );\n};\n\nexport default TechCol;\n","import React from \"react\";\nimport { TableContext } from \"../../duck/context\";\nimport { getColCount } from \"./duck/utils\";\nimport { TechCol } from \"./components\";\n\nconst TechRow: React.FC = () => {\n  const { state } = React.useContext(TableContext);\n  const [cols, setCols] = React.useState<any>([]);\n\n  React.useEffect(() => {\n    setCols(\n      Array(getColCount(state.rows))\n        .fill({})\n        .map((col, index) => ({ ...col, id: index + 1 }))\n    );\n  }, [state]);\n\n  if (!state.rows.length) {\n    return null;\n  }\n\n  return (\n    <tr>\n      <td style={{ width: 10 }} />\n      {cols.map((col: any) => (\n        <TechCol key={col.id} colId={col.id} />\n      ))}\n    </tr>\n  );\n};\n\nexport default TechRow;\n","import React from \"react\";\nimport { TableContext } from \"./duck/context\";\nimport tableState from \"./duck/state\";\nimport tableReducer from \"./duck/reducer\";\nimport { RowType } from \"./duck/types\";\nimport { Row, SelectionMenu, TechRow } from \"./components\";\nimport styles from \"./Table.module.css\";\nimport classNames from \"classnames\";\n\ninterface TableType {\n  onChange?: (rows: RowType[]) => any;\n}\n\nconst Table: React.FC<TableType> = ({ onChange }) => {\n  const [state, dispatch] = React.useReducer(tableReducer, tableState);\n\n  React.useEffect(() => {\n    if (onChange && typeof onChange === \"function\") {\n      onChange(state.rows);\n    }\n  }, [state, onChange]);\n\n  return (\n    <TableContext.Provider value={{ dispatch, state }}>\n      <div className={styles.wrapper}>\n        <table\n          className={classNames(styles.table, {\n            [styles.filled]: !!state.rows.length,\n          })}\n        >\n          <tbody>\n            <TechRow />\n            {state.rows.map((row: RowType) => (\n              <Row key={row.id} rowData={row} />\n            ))}\n          </tbody>\n        </table>\n        <SelectionMenu />\n      </div>\n    </TableContext.Provider>\n  );\n};\n\nexport default Table;\n","import React from 'react';\nimport { Table } from \"./components\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Table />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ChangeBackground_wrapper__2Uwxj\",\"colors\":\"ChangeBackground_colors__Je-TV\",\"colorButton\":\"ChangeBackground_colorButton__2QEDl\",\"transparent\":\"ChangeBackground_transparent__mqomV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"SelectionMenu_wrapper__2E3fb\",\"selected\":\"SelectionMenu_selected__1dW4V\",\"settingButton\":\"SelectionMenu_settingButton__2RZd1\",\"menu\":\"SelectionMenu_menu__3_fZg\"};"],"sourceRoot":""}