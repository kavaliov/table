{"version":3,"sources":["components/table/Table.module.css","components/table/components/selection-menu/SelectionMenu.module.css","components/table/duck/context.ts","components/table/duck/state.ts","components/table/duck/actions.ts","components/table/duck/reducer.ts","components/table/duck/utils.ts","components/table/components/col/Col.tsx","components/table/components/row/Row.tsx","components/table/components/button/Button.tsx","components/table/components/selection-menu/components/merge/Merge.tsx","components/table/components/selection-menu/components/merge/duck/utils.ts","components/table/components/selection-menu/components/merge/duck/operations.ts","components/table/components/selection-menu/SelectionMenu.tsx","components/table/components/selection-menu/duck/utils.ts","components/table/Table.tsx","App.tsx","index.tsx","components/table/components/button/Button.module.css","components/table/components/col/Col.module.css"],"names":["module","exports","TableContext","React","tableState","touched","selectionState","selected","rows","id","height","cols","content","type","setStartSelection","createStandardAction","setEndSelection","setSelectedSelection","setTouched","clearSelection","rowsUpdate","tableReducer","createReducer","initialState","handleAction","actions","state","positionStart","payload","start","positionEnd","end","getRange","row","min","rowId","max","col","colId","belongs","current","range","Col","colData","useContext","dispatch","useState","setSelected","useEffect","onMouseDown","onMouseUp","onMouseEnter","colSpan","rowSpan","className","classNames","styles","wrapper","Row","rowData","style","map","Button","children","onClick","active","disabled","Merge","selectedCellCounts","setSelectedCellCounts","getCellCount","targetCol","console","log","forEach","filter","mergeCols","SelectionMenu","position","setPosition","cell","document","getElementById","top","offsetTop","left","offsetLeft","getMenuPosition","Table","useReducer","Provider","value","table","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.1c10345e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Table_wrapper__2oJSk\",\"table\":\"Table_table__3Cw9e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"SelectionMenu_wrapper__2E3fb\"};","import * as React from \"react\";\nimport { SketchContext as SketchContextType } from \"./types\";\n\nexport const TableContext = React.createContext<SketchContextType>(\n  null as any\n);\n","import { TableState } from \"./types\";\n\nconst tableState: TableState = {\n  touched: false,\n  selectionState: {\n    selected: false,\n  },\n  rows: [\n    {\n      id: 1,\n      height: 60,\n      cols: [\n        { id: 1, content: \"11\", type: \"text\" },\n        { id: 2, content: \"12\", type: \"text\" },\n        { id: 3, content: \"13\", type: \"text\" },\n      ],\n    },\n    {\n      id: 2,\n      height: 50,\n      cols: [\n        { id: 1, content: \"21\", type: \"text\" },\n        { id: 2, content: \"22\", type: \"text\" },\n        { id: 3, content: \"23\", type: \"text\" },\n      ],\n    },\n    {\n      id: 3,\n      height: 70,\n      cols: [\n        { id: 1, content: \"31\", type: \"text\" },\n        { id: 2, content: \"32\", type: \"text\" },\n        { id: 3, content: \"33\", type: \"text\" },\n      ],\n    },\n    {\n      id: 4,\n      height: 80,\n      cols: [\n        { id: 1, content: \"41\", type: \"text\" },\n        { id: 2, content: \"42\", type: \"text\" },\n        { id: 3, content: \"43\", type: \"text\" },\n      ],\n    },\n  ],\n};\n\nexport default tableState;\n","import { createStandardAction } from \"typesafe-actions\";\nimport {PositionStateType, RowType} from \"./types\";\n\nexport const setStartSelection = createStandardAction(\n  \"TABLE/SET_START_SELECTION\"\n)<{\n  positionStart: PositionStateType;\n}>();\n\nexport const setEndSelection = createStandardAction(\"TABLE/SET_END_SELECTION\")<{\n  positionEnd: PositionStateType;\n}>();\n\nexport const setSelectedSelection = createStandardAction(\n  \"TABLE/SET_SELECTED_SELECTION\"\n)<{ selected: boolean }>();\n\nexport const setTouched = createStandardAction(\"TABLE/SET_TOUCHED\")<{\n  touched: boolean;\n}>();\n\nexport const clearSelection = createStandardAction(\"TABLE/CLEAR_SELECTION\")();\n\nexport const rowsUpdate = createStandardAction(\"TABLE/ROWS_UPDATE\")<{\n  rows: RowType[]\n}>();\n","import { createReducer, ActionType } from \"typesafe-actions\";\nimport initialState from \"./state\";\nimport * as actions from \"./actions\";\nimport * as Types from \"./types\";\n\ntype Action = ActionType<typeof actions>;\n\nconst tableReducer = createReducer<Types.TableState, Action>(initialState)\n  .handleAction(\n    actions.setStartSelection,\n    (state, { payload: { positionStart } }) => ({\n      ...state,\n      selectionState: {\n        ...state.selectionState,\n        start: positionStart,\n      },\n    })\n  )\n  .handleAction(\n    actions.setEndSelection,\n    (state, { payload: { positionEnd } }) => ({\n      ...state,\n      selectionState: {\n        ...state.selectionState,\n        end: positionEnd,\n      },\n    })\n  )\n  .handleAction(actions.setTouched, (state, { payload: { touched } }) => ({\n    ...state,\n    touched,\n  }))\n  .handleAction(\n    actions.setSelectedSelection,\n    (state, { payload: { selected } }) => ({\n      ...state,\n      selectionState: {\n        ...state.selectionState,\n        selected,\n      },\n    })\n  )\n  .handleAction(actions.clearSelection, (state) => ({\n    ...state,\n    selectionState: {\n      selected: false,\n    },\n  }))\n  .handleAction(actions.rowsUpdate, (state, { payload: { rows } }) => ({\n    ...state,\n    rows,\n  }));\n\nexport default tableReducer;\n","import { PositionStateType, RangeType } from \"./types\";\n\nexport const getRange = (\n  start: PositionStateType,\n  end: PositionStateType\n): RangeType => ({\n  row: {\n    min: start.rowId < end.rowId ? start.rowId : end.rowId,\n    max: start.rowId < end.rowId ? end.rowId : start.rowId,\n  },\n  col: {\n    min: start.colId < end.colId ? start.colId : end.colId,\n    max: start.colId < end.colId ? end.colId : start.colId,\n  },\n});\n\nexport const belongs = (\n  start: PositionStateType,\n  end: PositionStateType,\n  current: PositionStateType\n): boolean => {\n  const range = getRange(start, end);\n\n  return (\n    current.rowId >= range.row.min &&\n    current.rowId <= range.row.max &&\n    current.colId >= range.col.min &&\n    current.colId <= range.col.max\n  );\n};\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport { ColType as ColDataType } from \"../../duck/types\";\nimport { TableContext } from \"../../duck/context\";\nimport {\n  clearSelection,\n  setEndSelection,\n  setSelectedSelection,\n  setStartSelection,\n  setTouched,\n} from \"../../duck/actions\";\nimport { belongs } from \"../../duck/utils\";\nimport styles from \"./Col.module.css\";\n\ninterface ColType {\n  colData: ColDataType;\n  rowId: number;\n}\n\nconst Col: React.FC<ColType> = ({ colData, rowId }) => {\n  const { state, dispatch } = React.useContext(TableContext);\n  const [selected, setSelected] = React.useState<boolean>(false);\n\n  React.useEffect(() => {\n    if (state.selectionState.start && state.selectionState.end) {\n      setSelected(\n        belongs(state.selectionState.start, state.selectionState.end, {\n          rowId,\n          colId: colData.id,\n        })\n      );\n    } else {\n      setSelected(false);\n    }\n  }, [state, rowId, colData]);\n\n  const selectStartHandler = () => {\n    dispatch(clearSelection());\n    dispatch(setTouched({ touched: true }));\n    dispatch(\n      setStartSelection({ positionStart: { rowId, colId: colData.id } })\n    );\n  };\n\n  const selectEndHandler = () => {\n    dispatch(setTouched({ touched: false }));\n    dispatch(setSelectedSelection({ selected: true }));\n    dispatch(setEndSelection({ positionEnd: { rowId, colId: colData.id } }));\n  };\n\n  const selectUpdateHandler = () => {\n    if (state.touched) {\n      dispatch(setEndSelection({ positionEnd: { rowId, colId: colData.id } }));\n    }\n  };\n\n  return (\n    <td\n      id={`col-${rowId}-${colData.id}`}\n      onMouseDown={selectStartHandler}\n      onMouseUp={selectEndHandler}\n      onMouseEnter={selectUpdateHandler}\n      colSpan={colData.colSpan}\n      rowSpan={colData.rowSpan}\n      className={classNames(styles.wrapper, { [styles.selected]: selected })}\n    >\n      {colData.content}\n    </td>\n  );\n};\n\nexport default Col;\n","import React from \"react\";\nimport { RowType as RowDataType, ColType } from \"../../duck/types\";\nimport Col from \"../col\";\n\ninterface RowType {\n  rowData: RowDataType;\n}\n\nconst Row: React.FC<RowType> = ({ rowData }) => {\n  return (\n    <tr style={{ height: rowData.height }}>\n      {rowData.cols.map((col: ColType) => (\n        <Col key={col.id} colData={col} rowId={rowData.id} />\n      ))}\n    </tr>\n  );\n};\n\nexport default Row;\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport styles from \"./Button.module.css\";\n\ninterface ButtonType {\n  onClick?: () => any;\n  className?: string;\n  active?: boolean;\n  style?: any;\n  disabled?: boolean;\n}\n\nconst Button: React.FC<ButtonType> = ({\n  children,\n  onClick,\n  className,\n  style,\n  active = false,\n  disabled = false,\n}) => (\n  <button\n    disabled={disabled}\n    onClick={onClick}\n    className={classNames(styles.wrapper, className, {\n      [styles.active]: active,\n      [styles.disabled]: disabled,\n    })}\n    style={style}\n  >\n    {children}\n  </button>\n);\n\nexport default Button;\n","import React from \"react\";\nimport Button from \"../../../button\";\nimport { TableContext } from \"../../../../duck/context\";\nimport { getCellCount } from \"./duck/utils\";\nimport { mergeCols } from \"./duck/operations\";\n\nconst Merge: React.FC = () => {\n  const [selectedCellCounts, setSelectedCellCounts] = React.useState(0);\n  const { state, dispatch } = React.useContext(TableContext);\n\n  React.useEffect(() => {\n    setSelectedCellCounts(getCellCount(state.selectionState));\n  }, [state]);\n\n  if (selectedCellCounts <= 1) {\n    return null;\n  }\n\n  const mergeHandler = () => {\n    mergeCols(state, dispatch);\n  };\n\n  return <Button onClick={mergeHandler}>Merge</Button>;\n};\n\nexport default Merge;\n","import { SelectionStateType } from \"../../../../../duck/types\";\nimport { getRange } from \"../../../../../duck/utils\";\n\nexport const getCellCount = (selectionState: SelectionStateType): number => {\n  if (selectionState.start && selectionState.end) {\n    const range = getRange(selectionState.start, selectionState.end);\n\n    return (\n      (range.row.max - range.row.min + 1) * (range.col.max - range.col.min + 1)\n    );\n  }\n\n  return 0;\n};\n","import {\n  AnyDispatch,\n  ColType,\n  PositionStateType,\n  RowType,\n  TableState,\n} from \"../../../../../duck/types\";\nimport { belongs, getRange } from \"../../../../../duck/utils\";\nimport { clearSelection, rowsUpdate } from \"../../../../../duck/actions\";\n\nexport const mergeCols = (state: TableState, dispatch: AnyDispatch): void => {\n  const { selectionState, rows } = state;\n\n  if (selectionState.end && selectionState.start) {\n    const range = getRange(selectionState.start, selectionState.end);\n    const colSpan = range.col.max + 1 - range.col.min;\n    const rowSpan = range.row.max + 1 - range.row.min;\n    const targetCol = { row: range.row.min, col: range.col.min };\n\n    console.log(targetCol);\n\n    if (colSpan > 1) {\n      rows[targetCol.row - 1].cols[targetCol.col - 1].colSpan = colSpan;\n    }\n\n    if (rowSpan > 1) {\n      rows[targetCol.row - 1].cols[targetCol.col - 1].rowSpan = rowSpan;\n    }\n\n    rows.forEach((row: RowType) => {\n      row.cols = row.cols.filter(\n        (col: ColType) =>\n          (row.id === targetCol.row && col.id === targetCol.col) ||\n          !belongs(\n            selectionState.start as PositionStateType,\n            selectionState.end as PositionStateType,\n            {\n              rowId: row.id,\n              colId: col.id,\n            }\n          )\n      );\n    });\n\n    dispatch(rowsUpdate({ rows }));\n    dispatch(clearSelection());\n  }\n};\n","import React from \"react\";\nimport { TableContext } from \"../../duck/context\";\nimport { getMenuPosition, PositionType } from \"./duck/utils\";\nimport { Merge } from \"./components\";\nimport styles from \"./SelectionMenu.module.css\";\n\nconst SelectionMenu: React.FC = () => {\n  const { state } = React.useContext(TableContext);\n  const [position, setPosition] = React.useState<PositionType>();\n\n  React.useEffect(() => {\n    if (state.selectionState.start && state.selectionState.end) {\n      setPosition(\n        getMenuPosition(state.selectionState.start, state.selectionState.end)\n      );\n    }\n  }, [state]);\n\n  if (!state.selectionState.selected) {\n    return null;\n  }\n\n  return (\n    <div className={styles.wrapper} style={position}>\n      <Merge />\n    </div>\n  );\n};\n\nexport default SelectionMenu;\n","import { getRange } from \"../../../duck/utils\";\nimport { PositionStateType } from \"../../../duck/types\";\n\nexport interface PositionType {\n  top: number;\n  left: number;\n}\n\nexport const getMenuPosition = (\n  start: PositionStateType,\n  end: PositionStateType\n): PositionType => {\n  const range = getRange(start, end);\n  const cell = document.getElementById(`col-${range.row.min}-${range.col.min}`);\n\n  if (cell) {\n    return {\n      top: cell.offsetTop + 8,\n      left: cell.offsetLeft + 8,\n    };\n  }\n\n  return {\n    top: 0,\n    left: 0,\n  };\n};\n","import React from \"react\";\nimport { TableContext } from \"./duck/context\";\nimport tableState from \"./duck/state\";\nimport tableReducer from \"./duck/reducer\";\nimport { RowType } from \"./duck/types\";\nimport { Row, SelectionMenu } from \"./components\";\nimport styles from \"./Table.module.css\";\n\nconst Table: React.FC = () => {\n  const [state, dispatch] = React.useReducer(tableReducer, tableState);\n\n  return (\n    <TableContext.Provider value={{ dispatch, state }}>\n      <div className={styles.wrapper}>\n        <table className={styles.table}>\n          <tbody>\n            {state.rows.map((row: RowType) => (\n              <Row key={row.id} rowData={row} />\n            ))}\n          </tbody>\n        </table>\n        <SelectionMenu />\n      </div>\n    </TableContext.Provider>\n  );\n};\n\nexport default Table;\n","import React from 'react';\nimport { Table } from \"./components\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Table />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Button_wrapper__pj90c\",\"active\":\"Button_active__FWtIw\",\"disabled\":\"Button_disabled__1AAMG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Col_wrapper__3FddR\",\"selected\":\"Col_selected__29n3t\"};"],"sourceRoot":""}