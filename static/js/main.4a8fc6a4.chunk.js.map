{"version":3,"sources":["components/table/components/button/Button.module.css","components/table/Table.module.css","components/table/components/col/Col.module.css","components/table/components/col/components/text-edit/TextEdit.module.css","components/table/components/selection-menu/SelectionMenu.module.css","components/table/components/add-col/AddCol.module.css","components/table/components/add-row/AddRow.module.css","components/table/duck/context.ts","components/table/duck/state.ts","components/table/duck/actions.ts","components/table/duck/reducer.ts","components/table/duck/constants.ts","components/table/duck/utils.ts","components/table/components/col/components/text-edit/TextEdit.tsx","components/table/components/col/Col.tsx","components/table/components/row/Row.tsx","components/table/components/button/Button.tsx","components/table/components/selection-menu/components/merge/Merge.tsx","components/table/components/selection-menu/components/merge/duck/operations.ts","components/table/components/selection-menu/components/edit/Edit.tsx","components/table/components/selection-menu/SelectionMenu.tsx","components/table/components/selection-menu/duck/utils.ts","components/table/components/add-col/AddCol.tsx","components/table/components/add-col/duck/utils.ts","components/table/components/add-row/duck/utils.ts","components/table/components/add-row/AddRow.tsx","components/table/Table.tsx","App.tsx","index.tsx"],"names":["module","exports","TableContext","React","tableState","editableCol","touched","selectionState","selected","rows","setStartSelection","createStandardAction","setEndSelection","setSelectedSelection","setTouched","clearSelection","rowsUpdate","setEditableCol","updateColContent","tableReducer","createReducer","initialState","handleAction","actions","state","positionStart","payload","start","positionEnd","end","colId","rowId","content","cols","emptyCol","type","display","getRange","row","min","max","col","belongs","current","range","getCellCount","TextEdit","value","dispatch","useContext","inputRef","useRef","useEffect","focus","ref","defaultValue","onBlur","e","target","className","styles","wrapper","Col","colData","useState","setSelected","editMode","setEditMode","id","onMouseDown","onMouseUp","onMouseEnter","colSpan","rowSpan","classNames","Row","rowData","style","height","map","Button","children","onClick","active","disabled","Merge","selectedCellCounts","setSelectedCellCounts","targetCol","forEach","mergeCols","Edit","SelectionMenu","position","setPosition","cell","document","getElementById","top","offsetTop","left","offsetLeft","getMenuPosition","AddCol","length","generateNewRows","colCount","newRow","Array","fill","index","AddRow","Table","useReducer","Provider","table","filled","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.4a8fc6a4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Button_wrapper__pj90c\",\"active\":\"Button_active__FWtIw\",\"disabled\":\"Button_disabled__1AAMG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Table_wrapper__2oJSk\",\"table\":\"Table_table__3Cw9e\",\"filled\":\"Table_filled__wq5i1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Col_wrapper__3FddR\",\"selected\":\"Col_selected__29n3t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"TextEdit_wrapper__3ANjp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"SelectionMenu_wrapper__2E3fb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"AddCol_wrapper__2LYv8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"AddRow_wrapper__g2LGC\"};","import * as React from \"react\";\nimport { SketchContext as SketchContextType } from \"./types\";\n\nexport const TableContext = React.createContext<SketchContextType>(\n  null as any\n);\n","import { TableState } from \"./types\";\n\nconst tableState: TableState = {\n  editableCol: 0,\n  touched: false,\n  selectionState: {\n    selected: false,\n  },\n  rows: [],\n};\n\nexport default tableState;\n","import { createStandardAction } from \"typesafe-actions\";\nimport { PositionStateType, RowType } from \"./types\";\n\nexport const setStartSelection = createStandardAction(\n  \"TABLE/SET_START_SELECTION\"\n)<{\n  positionStart: PositionStateType;\n}>();\n\nexport const setEndSelection = createStandardAction(\"TABLE/SET_END_SELECTION\")<{\n  positionEnd: PositionStateType;\n}>();\n\nexport const setSelectedSelection = createStandardAction(\n  \"TABLE/SET_SELECTED_SELECTION\"\n)<{ selected: boolean }>();\n\nexport const setTouched = createStandardAction(\"TABLE/SET_TOUCHED\")<{\n  touched: boolean;\n}>();\n\nexport const clearSelection = createStandardAction(\"TABLE/CLEAR_SELECTION\")();\n\nexport const rowsUpdate = createStandardAction(\"TABLE/ROWS_UPDATE\")<{\n  rows: RowType[];\n}>();\n\nexport const setEditableCol = createStandardAction(\"TABLE/SET_EDITABLE_COL\")<{\n  editableCol: number;\n}>();\n\nexport const updateColContent = createStandardAction(\"TABLE/UPDATE_COL_CONTENT\")<{\n  rowId: number;\n  colId: number;\n  content: string;\n}>();\n","import { createReducer, ActionType } from \"typesafe-actions\";\nimport initialState from \"./state\";\nimport * as actions from \"./actions\";\nimport * as Types from \"./types\";\n\ntype Action = ActionType<typeof actions>;\n\nconst tableReducer = createReducer<Types.TableState, Action>(initialState)\n  .handleAction(\n    actions.setStartSelection,\n    (state, { payload: { positionStart } }) => ({\n      ...state,\n      selectionState: {\n        ...state.selectionState,\n        start: positionStart,\n      },\n    })\n  )\n  .handleAction(\n    actions.setEndSelection,\n    (state, { payload: { positionEnd } }) => ({\n      ...state,\n      selectionState: {\n        ...state.selectionState,\n        end: positionEnd,\n      },\n    })\n  )\n  .handleAction(actions.setTouched, (state, { payload: { touched } }) => ({\n    ...state,\n    touched,\n  }))\n  .handleAction(\n    actions.setSelectedSelection,\n    (state, { payload: { selected } }) => ({\n      ...state,\n      selectionState: {\n        ...state.selectionState,\n        selected,\n      },\n    })\n  )\n  .handleAction(actions.clearSelection, (state) => ({\n    ...state,\n    selectionState: {\n      selected: false,\n    },\n  }))\n  .handleAction(actions.rowsUpdate, (state, { payload: { rows } }) => ({\n    ...state,\n    rows,\n  }))\n  .handleAction(\n    actions.setEditableCol,\n    (state, { payload: { editableCol } }) => ({\n      ...state,\n      editableCol,\n    })\n  )\n  .handleAction(\n    actions.updateColContent,\n    (state, { payload: { colId, rowId, content } }) => {\n      const { rows } = state;\n\n      rows[rowId - 1].cols[colId - 1].content = content;\n\n      return {\n        ...state,\n        rows,\n      };\n    }\n  );\n\nexport default tableReducer;\n","export const emptyCol = { content: \"\", type: \"text\", display: true };\n\nexport const ROW_HEIGHT = 45;","import { PositionStateType, RangeType, SelectionStateType } from \"./types\";\n\nexport const getRange = (\n  start: PositionStateType,\n  end: PositionStateType\n): RangeType => ({\n  row: {\n    min: start.rowId < end.rowId ? start.rowId : end.rowId,\n    max: start.rowId < end.rowId ? end.rowId : start.rowId,\n  },\n  col: {\n    min: start.colId < end.colId ? start.colId : end.colId,\n    max: start.colId < end.colId ? end.colId : start.colId,\n  },\n});\n\nexport const belongs = (\n  start: PositionStateType,\n  end: PositionStateType,\n  current: PositionStateType\n): boolean => {\n  const range = getRange(start, end);\n\n  return (\n    current.rowId >= range.row.min &&\n    current.rowId <= range.row.max &&\n    current.colId >= range.col.min &&\n    current.colId <= range.col.max\n  );\n};\n\nexport const getCellCount = (selectionState: SelectionStateType): number => {\n  if (selectionState.start && selectionState.end) {\n    const range = getRange(selectionState.start, selectionState.end);\n\n    return (\n      (range.row.max - range.row.min + 1) * (range.col.max - range.col.min + 1)\n    );\n  }\n\n  return 0;\n};\n","import React, {useRef} from \"react\";\nimport { setEditableCol, updateColContent } from \"../../../../duck/actions\";\nimport { TableContext } from \"../../../../duck/context\";\nimport styles from \"./TextEdit.module.css\";\n\ninterface TextEditType {\n  value: string;\n  rowId: number;\n  colId: number;\n}\n\nconst TextEdit: React.FC<TextEditType> = ({ value, colId, rowId }) => {\n  const { dispatch } = React.useContext(TableContext);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  React.useEffect(() => {\n    if(inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, []);\n\n  const editBlurHandler = (e: any) => {\n    dispatch(updateColContent({ rowId, colId, content: e.target.value }));\n    dispatch(setEditableCol({ editableCol: 0 }));\n  };\n\n  return (\n    <input\n      ref={inputRef}\n      defaultValue={value}\n      onBlur={editBlurHandler}\n      className={styles.wrapper}\n    />\n  );\n};\n\nexport default TextEdit;\n","import React, { useRef } from \"react\";\nimport classNames from \"classnames\";\nimport { ColType as ColDataType } from \"../../duck/types\";\nimport { TableContext } from \"../../duck/context\";\nimport {\n  clearSelection,\n  setEndSelection,\n  setSelectedSelection,\n  setStartSelection,\n  setTouched,\n} from \"../../duck/actions\";\nimport { belongs } from \"../../duck/utils\";\nimport styles from \"./Col.module.css\";\nimport { TextEdit } from \"./components\";\n\ninterface ColType {\n  colData: ColDataType;\n  rowId: number;\n}\n\nconst Col: React.FC<ColType> = ({ colData, rowId }) => {\n  const [selected, setSelected] = React.useState<boolean>(false);\n  const [editMode, setEditMode] = React.useState<boolean>(false);\n  const { state, dispatch } = React.useContext(TableContext);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  React.useEffect(() => {\n    if (state.selectionState.start && state.selectionState.end) {\n      setSelected(\n        belongs(state.selectionState.start, state.selectionState.end, {\n          rowId,\n          colId: colData.id,\n        })\n      );\n    } else {\n      setSelected(false);\n    }\n\n    if (state.editableCol === +`${rowId}${colData.id}`) {\n      setEditMode(true);\n    } else {\n      setEditMode(false);\n    }\n  }, [state, rowId, colData, inputRef]);\n\n  if (!colData.display) {\n    return null;\n  }\n\n  const selectStartHandler = () => {\n    dispatch(clearSelection());\n    dispatch(setTouched({ touched: true }));\n    dispatch(\n      setStartSelection({ positionStart: { rowId, colId: colData.id } })\n    );\n  };\n\n  const selectEndHandler = () => {\n    dispatch(setTouched({ touched: false }));\n    dispatch(setSelectedSelection({ selected: true }));\n    dispatch(setEndSelection({ positionEnd: { rowId, colId: colData.id } }));\n  };\n\n  const selectUpdateHandler = () => {\n    if (state.touched) {\n      dispatch(setEndSelection({ positionEnd: { rowId, colId: colData.id } }));\n    }\n  };\n\n  return (\n    <td\n      id={`col-${rowId}-${colData.id}`}\n      onMouseDown={selectStartHandler}\n      onMouseUp={selectEndHandler}\n      onMouseEnter={selectUpdateHandler}\n      colSpan={colData.colSpan}\n      rowSpan={colData.rowSpan}\n      className={classNames(styles.wrapper, { [styles.selected]: selected })}\n    >\n      {editMode ? (\n        <TextEdit value={colData.content} rowId={rowId} colId={colData.id} />\n      ) : (\n        colData.content\n      )}\n    </td>\n  );\n};\n\nexport default Col;\n","import React from \"react\";\nimport { RowType as RowDataType, ColType } from \"../../duck/types\";\nimport { ROW_HEIGHT } from \"../../duck/constants\";\nimport Col from \"../col\";\n\ninterface RowType {\n  rowData: RowDataType;\n}\n\nconst Row: React.FC<RowType> = ({ rowData }) => {\n  return (\n    <tr style={{ height: rowData.height || ROW_HEIGHT }}>\n      {rowData.cols.map((col: ColType) => (\n        <Col key={col.id} colData={col} rowId={rowData.id} />\n      ))}\n    </tr>\n  );\n};\n\nexport default Row;\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport styles from \"./Button.module.css\";\n\ninterface ButtonType {\n  onClick?: () => any;\n  className?: string;\n  active?: boolean;\n  style?: any;\n  disabled?: boolean;\n}\n\nconst Button: React.FC<ButtonType> = ({\n  children,\n  onClick,\n  className,\n  style,\n  active = false,\n  disabled = false,\n}) => (\n  <button\n    disabled={disabled}\n    onClick={onClick}\n    className={classNames(styles.wrapper, className, {\n      [styles.active]: active,\n      [styles.disabled]: disabled,\n    })}\n    style={style}\n  >\n    {children}\n  </button>\n);\n\nexport default Button;\n","import React from \"react\";\nimport Button from \"../../../button\";\nimport { TableContext } from \"../../../../duck/context\";\nimport { getCellCount } from \"../../../../duck/utils\";\nimport { mergeCols } from \"./duck/operations\";\n\nconst Merge: React.FC = () => {\n  const [selectedCellCounts, setSelectedCellCounts] = React.useState(0);\n  const { state, dispatch } = React.useContext(TableContext);\n\n  React.useEffect(() => {\n    setSelectedCellCounts(getCellCount(state.selectionState));\n  }, [state]);\n\n  if (selectedCellCounts <= 1) {\n    return null;\n  }\n\n  const mergeHandler = () => {\n    mergeCols(state, dispatch);\n  };\n\n  return <Button onClick={mergeHandler}>Merge</Button>;\n};\n\nexport default Merge;\n","import {\n  AnyDispatch,\n  ColType,\n  PositionStateType,\n  RowType,\n  TableState,\n} from \"../../../../../duck/types\";\nimport { belongs, getRange } from \"../../../../../duck/utils\";\nimport { clearSelection, rowsUpdate } from \"../../../../../duck/actions\";\n\nexport const mergeCols = (state: TableState, dispatch: AnyDispatch): void => {\n  const { selectionState, rows } = state;\n\n  if (selectionState.end && selectionState.start) {\n    const range = getRange(selectionState.start, selectionState.end);\n    const colSpan = range.col.max + 1 - range.col.min;\n    const rowSpan = range.row.max + 1 - range.row.min;\n    const targetCol = { row: range.row.min, col: range.col.min };\n\n    if (colSpan > 1) {\n      rows[targetCol.row - 1].cols[targetCol.col - 1].colSpan = colSpan;\n    }\n\n    if (rowSpan > 1) {\n      rows[targetCol.row - 1].cols[targetCol.col - 1].rowSpan = rowSpan;\n    }\n\n    rows.forEach((row: RowType) => {\n      row.cols = row.cols.map((col: ColType) => {\n        if (\n          belongs(\n            selectionState.start as PositionStateType,\n            selectionState.end as PositionStateType,\n            {\n              rowId: row.id,\n              colId: col.id,\n            }\n          ) &&\n          !(targetCol.row === row.id && targetCol.col === col.id)\n        ) {\n          return { ...col, display: false };\n        }\n\n        return col;\n      });\n    });\n\n    dispatch(rowsUpdate({ rows }));\n    dispatch(clearSelection());\n  }\n};\n","import React from \"react\";\nimport Button from \"../../../button\";\nimport { TableContext } from \"../../../../duck/context\";\nimport { getCellCount } from \"../../../../duck/utils\";\nimport { setEditableCol } from \"../../../../duck/actions\";\n\nconst Edit: React.FC = () => {\n  const { dispatch, state } = React.useContext(TableContext);\n\n  if (getCellCount(state.selectionState) > 1) {\n    return null;\n  }\n\n  const editHandler = (): void => {\n    if (state.selectionState.start) {\n      dispatch(\n        setEditableCol({\n          editableCol: +`${state.selectionState.start.rowId}${state.selectionState.start.colId}`,\n        })\n      );\n    }\n  };\n\n  return <Button onClick={editHandler}>Edit</Button>;\n};\n\nexport default Edit;\n","import React from \"react\";\nimport { TableContext } from \"../../duck/context\";\nimport { getMenuPosition, PositionType } from \"./duck/utils\";\nimport { Merge, Edit } from \"./components\";\nimport styles from \"./SelectionMenu.module.css\";\n\nconst SelectionMenu: React.FC = () => {\n  const { state } = React.useContext(TableContext);\n  const [position, setPosition] = React.useState<PositionType>();\n\n  React.useEffect(() => {\n    if (state.selectionState.start && state.selectionState.end) {\n      setPosition(\n        getMenuPosition(state.selectionState.start, state.selectionState.end)\n      );\n    }\n  }, [state]);\n\n  if (!state.selectionState.selected) {\n    return null;\n  }\n\n  return (\n    <div className={styles.wrapper} style={position}>\n      <Merge />\n      <Edit />\n    </div>\n  );\n};\n\nexport default SelectionMenu;\n","import { getRange } from \"../../../duck/utils\";\nimport { PositionStateType } from \"../../../duck/types\";\n\nexport interface PositionType {\n  top: number;\n  left: number;\n}\n\nexport const getMenuPosition = (\n  start: PositionStateType,\n  end: PositionStateType\n): PositionType => {\n  const range = getRange(start, end);\n  const cell = document.getElementById(`col-${range.row.min}-${range.col.min}`);\n\n  if (cell) {\n    return {\n      top: cell.offsetTop + 8,\n      left: cell.offsetLeft + 8,\n    };\n  }\n\n  return {\n    top: 0,\n    left: 0,\n  };\n};\n","import React from \"react\";\nimport Button from \"../button\";\nimport { TableContext } from \"../../duck/context\";\nimport { rowsUpdate } from \"../../duck/actions\";\nimport { generateRowsWithNewCol } from \"./duck/utils\";\nimport styles from \"./AddCol.module.css\";\n\nconst AddCol: React.FC = () => {\n  const { state, dispatch } = React.useContext(TableContext);\n\n  const addColHandler = (): void => {\n    dispatch(rowsUpdate({ rows: generateRowsWithNewCol(state.rows) }));\n  };\n\n  if (!state.rows.length) {\n    return null;\n  }\n\n  return (\n    <Button onClick={addColHandler} className={styles.wrapper}>\n      Add Cell\n    </Button>\n  );\n};\n\nexport default AddCol;\n","import { RowType } from \"../../../duck/types\";\nimport { emptyCol } from \"../../../duck/constants\";\n\nexport const generateRowsWithNewCol = (rows: RowType[]): RowType[] =>\n  rows.map((row: RowType) => ({\n    ...row,\n    cols: [...row.cols, { id: row.cols.length + 1, ...emptyCol }],\n  }));\n","import { emptyCol } from \"../../../duck/constants\";\nimport { RowType } from \"../../../duck/types\";\n\nexport const generateNewRows = (rows: RowType[]): RowType[] => {\n  const colCount = rows[0] ? rows[0].cols.length : 1;\n\n  const newRow: RowType = {\n    id: rows.length + 1,\n    cols: new Array(colCount)\n      .fill(emptyCol)\n      .map((col, index) => ({ ...col, id: index + 1 })),\n  };\n\n  return [...rows, newRow];\n};\n","import React from \"react\";\nimport Button from \"../button\";\nimport { TableContext } from \"../../duck/context\";\nimport { rowsUpdate } from \"../../duck/actions\";\nimport { generateNewRows } from \"./duck/utils\";\nimport styles from \"./AddRow.module.css\";\n\nconst AddRow: React.FC = () => {\n  const { dispatch, state } = React.useContext(TableContext);\n\n  const addNewRowHandler = () => {\n    dispatch(rowsUpdate({ rows: generateNewRows(state.rows) }));\n  };\n\n  return (\n    <Button onClick={addNewRowHandler} className={styles.wrapper}>\n      Add row\n    </Button>\n  );\n};\n\nexport default AddRow;\n","import React from \"react\";\nimport { TableContext } from \"./duck/context\";\nimport tableState from \"./duck/state\";\nimport tableReducer from \"./duck/reducer\";\nimport { RowType } from \"./duck/types\";\nimport { Row, SelectionMenu, AddCol, AddRow } from \"./components\";\nimport styles from \"./Table.module.css\";\nimport classNames from \"classnames\";\n\nconst Table: React.FC = () => {\n  const [state, dispatch] = React.useReducer(tableReducer, tableState);\n\n  return (\n    <TableContext.Provider value={{ dispatch, state }}>\n      <div className={styles.wrapper}>\n        <table\n          className={classNames(styles.table, {\n            [styles.filled]: !!state.rows.length,\n          })}\n        >\n          <tbody>\n            {state.rows.map((row: RowType) => (\n              <Row key={row.id} rowData={row} />\n            ))}\n          </tbody>\n        </table>\n        <SelectionMenu />\n        <AddCol />\n        <AddRow />\n      </div>\n    </TableContext.Provider>\n  );\n};\n\nexport default Table;\n","import React from 'react';\nimport { Table } from \"./components\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Table />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}