{"version":3,"sources":["components/table/components/selection-menu/components/change-background/ChangeBackground.module.css","components/table/components/button/Button.module.css","components/table/components/selection-menu/SelectionMenu.module.css","components/table/Table.module.css","components/table/components/col/Col.module.css","components/table/components/row/components/add-row/AddRow.module.css","components/table/components/tech-row/components/add-col/AddCol.module.css","components/table/components/col/components/text-edit/TextEdit.module.css","components/table/components/row/Row.module.css","components/table/components/tech-row/TechRow.module.css","components/table/duck/context.ts","components/table/duck/state.ts","components/table/duck/actions.ts","components/table/duck/reducer.ts","components/table/duck/constants.ts","components/table/duck/utils.ts","components/table/components/col/components/text-edit/TextEdit.tsx","components/table/components/col/Col.tsx","components/table/components/row/components/add-row/duck/utils.ts","components/table/components/row/components/add-row/AddRow.tsx","components/table/components/row/Row.tsx","components/table/components/button/Button.tsx","components/table/components/selection-menu/components/merge/Merge.tsx","components/table/components/selection-menu/components/merge/duck/operations.ts","components/table/components/selection-menu/components/change-background/ChangeBackground.tsx","components/table/components/selection-menu/assets/setting.svg","components/table/components/selection-menu/SelectionMenu.tsx","components/table/duck/hooks.ts","components/table/components/selection-menu/duck/utils.ts","components/table/components/tech-row/duck/utils.ts","components/table/components/tech-row/components/add-col/AddCol.tsx","components/table/components/tech-row/TechRow.tsx","components/table/Table.tsx","App.tsx","index.tsx"],"names":["module","exports","TableContext","React","tableState","editableCol","touched","selectionState","selected","rows","id","cols","content","type","display","setStartSelection","createStandardAction","setEndSelection","setSelectedSelection","setTouched","clearSelection","rowsUpdate","updateColContent","updateColBackground","tableReducer","createReducer","initialState","handleAction","actions","state","positionStart","payload","start","positionEnd","end","colId","rowId","background","emptyCol","BACKGROUND_COLORS","getRange","row","min","max","col","belongs","current","range","TextEdit","value","setEditMode","dispatch","useContext","inputRef","useRef","useEffect","focus","editHandler","e","target","ref","defaultValue","onBlur","onKeyDown","code","className","styles","wrapper","style","Col","colData","useState","setSelected","editMode","onMouseDown","onMouseUp","onMouseEnter","onDoubleClick","colSpan","rowSpan","classNames","generateNewRows","colCount","length","newRow","Array","fill","map","index","newRows","splice","AddRow","addButton","onClick","Row","rowData","height","techCol","Button","children","active","disabled","Merge","selectedCellCounts","setSelectedCellCounts","getCellCount","targetCol","forEach","mergeCols","ChangeBackground","changeColorHandler","color","colors","undefined","colorButton","transparent","SelectionMenu","position","setPosition","opened","setOpened","menuRef","callback","options","eventNames","handleEvent","event","contains","name","document","addEventListener","removeEventListener","useOutsideClick","cell","getElementById","top","offsetTop","left","offsetLeft","getMenuPosition","settingButton","src","icon","alt","menu","generateRowsWithNewCol","newCols","newCol","AddCol","TechRow","setCols","count","getColCount","width","Table","onChange","useReducer","Provider","table","filled","App","ReactDOM","render","StrictMode"],"mappings":"sFACAA,EAAOC,QAAU,CAAC,QAAU,kCAAkC,OAAS,iCAAiC,YAAc,sCAAsC,YAAc,wC,gBCA1KD,EAAOC,QAAU,CAAC,QAAU,wBAAwB,OAAS,uBAAuB,SAAW,2B,gBCA/FD,EAAOC,QAAU,CAAC,QAAU,+BAA+B,cAAgB,qCAAqC,KAAO,8B,gBCAvHD,EAAOC,QAAU,CAAC,QAAU,uBAAuB,MAAQ,qBAAqB,OAAS,wB,iBCAzFD,EAAOC,QAAU,CAAC,QAAU,qBAAqB,SAAW,wB,gBCA5DD,EAAOC,QAAU,CAAC,QAAU,wBAAwB,UAAY,4B,gBCAhED,EAAOC,QAAU,CAAC,QAAU,wBAAwB,UAAY,4B,iBCAhED,EAAOC,QAAU,CAAC,QAAU,4B,gBCA5BD,EAAOC,QAAU,CAAC,QAAU,uB,gBCA5BD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,QAAU,2B,4FCElDC,EAAeC,gBAC1B,MCyBaC,EA3BgB,CAC7BC,YAAa,EACbC,SAAS,EACTC,eAAgB,CACdC,UAAU,GAEZC,KAAM,CACJ,CACEC,GAAI,EACJC,KAAM,CACJ,CACEC,QAAS,GACTC,KAAM,OACNC,SAAS,EACTJ,GAAI,GAEN,CACEE,QAAS,GACTC,KAAM,OACNC,SAAS,EACTJ,GAAI,O,cCnBDK,EAAoBC,+BAC/B,4BAD+BA,GAMpBC,EAAkBD,+BAAqB,0BAArBA,GAIlBE,EAAuBF,+BAClC,+BADkCA,GAIvBG,EAAaH,+BAAqB,oBAArBA,GAIbI,EAAiBJ,+BAAqB,wBAArBA,GAEjBK,EAAaL,+BAAqB,oBAArBA,GAIbM,EAAmBN,+BAC9B,2BAD8BA,GAQnBO,EAAsBP,+BACjC,8BADiCA,GC4CpBQ,EAxEMC,wBAAwCC,GAC1DC,aACCC,GACA,SAACC,EAAD,OAAqBC,EAArB,EAAUC,QAAWD,cAArB,mBAAC,eACID,GADL,IAEEtB,eAAe,2BACVsB,EAAMtB,gBADG,IAEZyB,MAAOF,SAIZH,aACCC,GACA,SAACC,EAAD,OAAqBI,EAArB,EAAUF,QAAWE,YAArB,mBAAC,eACIJ,GADL,IAEEtB,eAAe,2BACVsB,EAAMtB,gBADG,IAEZ2B,IAAKD,SAIVN,aAAaC,GAAoB,SAACC,EAAD,OAAqBvB,EAArB,EAAUyB,QAAWzB,QAArB,mBAAC,eAC9BuB,GAD6B,IAEhCvB,eAEDqB,aACCC,GACA,SAACC,EAAD,OAAqBrB,EAArB,EAAUuB,QAAWvB,SAArB,mBAAC,eACIqB,GADL,IAEEtB,eAAe,2BACVsB,EAAMtB,gBADG,IAEZC,kBAILmB,aAAaC,GAAwB,SAACC,GAAD,mBAAC,eAClCA,GADiC,IAEpCtB,eAAgB,CACdC,UAAU,QAGbmB,aAAaC,GAAoB,SAACC,EAAD,OAAqBpB,EAArB,EAAUsB,QAAWtB,KAArB,mBAAC,eAC9BoB,GAD6B,IAEhCpB,YAEDkB,aACCC,GACA,SAACC,EAAD,GAAoD,IAAD,IAAzCE,QAAWI,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,MAAOxB,EAAgB,EAAhBA,QACzBH,EAASoB,EAATpB,KAIR,OAFAA,EAAK2B,EAAQ,GAAGzB,KAAKwB,EAAQ,GAAGvB,QAAUA,EAEnC,2BACFiB,GADL,IAEEpB,YAILkB,aACCC,GACA,SAACC,EAAD,GAAuD,IAAD,IAA5CE,QAAWI,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,WACzB5B,EAASoB,EAATpB,KAIR,OAFAA,EAAK2B,EAAQ,GAAGzB,KAAKwB,EAAQ,GAAGE,WAAaA,EAEtC,2BACFR,GADL,IAEEpB,YC1EK6B,EAAW,CAAE1B,QAAS,GAAIC,KAAM,OAAQC,SAAS,GAIjDyB,EAAoB,CAC/B,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,W,gBCXWC,EAAW,SACtBR,EACAE,GAFsB,MAGP,CACfO,IAAK,CACHC,IAAKV,EAAMI,MAAQF,EAAIE,MAAQJ,EAAMI,MAAQF,EAAIE,MACjDO,IAAKX,EAAMI,MAAQF,EAAIE,MAAQF,EAAIE,MAAQJ,EAAMI,OAEnDQ,IAAK,CACHF,IAAKV,EAAMG,MAAQD,EAAIC,MAAQH,EAAMG,MAAQD,EAAIC,MACjDQ,IAAKX,EAAMG,MAAQD,EAAIC,MAAQD,EAAIC,MAAQH,EAAMG,SAIxCU,EAAU,SACrBb,EACAE,EACAY,GAEA,IAAMC,EAAQP,EAASR,EAAOE,GAE9B,OACEY,EAAQV,OAASW,EAAMN,IAAIC,KAC3BI,EAAQV,OAASW,EAAMN,IAAIE,KAC3BG,EAAQX,OAASY,EAAMH,IAAIF,KAC3BI,EAAQX,OAASY,EAAMH,IAAID,K,yCCyBhBK,EAvC0B,SAAC,GAMnC,IALLC,EAKI,EALJA,MACAd,EAII,EAJJA,MACAC,EAGI,EAHJA,MACAC,EAEI,EAFJA,WACAa,EACI,EADJA,YAEQC,EAAahD,IAAMiD,WAAWlD,GAA9BiD,SACFE,EAAWC,iBAAyB,MAE1CnD,IAAMoD,WAAU,WACVF,EAASP,SACXO,EAASP,QAAQU,UAElB,IAEH,IAAMC,EAAc,SAACC,GACnBP,EAAS7B,EAAiB,CAAEc,QAAOD,QAAOvB,QAAS8C,EAAEC,OAAOV,SAC5DC,GAAY,IASd,OACE,uBACEU,IAAKP,EACLQ,aAAcZ,EACda,OAAQL,EACRM,UAXmB,SAACL,GACP,UAAXA,EAAEM,MACJP,EAAYC,IAUZO,UAAWC,IAAOC,QAClBC,MAAO,CAAE/B,iBC0CAgC,EArEgB,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,QAASlC,EAAY,EAAZA,MAAY,EACrBjC,IAAMoE,UAAkB,GADH,mBAC9C/D,EAD8C,KACpCgE,EADoC,OAErBrE,IAAMoE,UAAkB,GAFH,mBAE9CE,EAF8C,KAEpCvB,EAFoC,OAGzB/C,IAAMiD,WAAWlD,GAArC2B,EAH6C,EAG7CA,MAAOsB,EAHsC,EAGtCA,SACTE,EAAWC,iBAAyB,MAe1C,GAbAnD,IAAMoD,WAAU,WACV1B,EAAMtB,eAAeyB,OAASH,EAAMtB,eAAe2B,IACrDsC,EACE3B,EAAQhB,EAAMtB,eAAeyB,MAAOH,EAAMtB,eAAe2B,IAAK,CAC5DE,QACAD,MAAOmC,EAAQ5D,MAInB8D,GAAY,KAEb,CAAC3C,EAAOO,EAAOkC,EAASjB,KAEtBiB,EAAQxD,QACX,OAAO,KAuBT,OACE,qBACEJ,GAAE,cAAS0B,EAAT,YAAkBkC,EAAQ5D,IAC5BgE,YAvBuB,WACzBvB,EAAS/B,KACT+B,EAAShC,EAAW,CAAEb,SAAS,KAC/B6C,EACEpC,EAAkB,CAAEe,cAAe,CAAEM,QAAOD,MAAOmC,EAAQ5D,QAoB3DiE,UAhBqB,WACvBxB,EAAShC,EAAW,CAAEb,SAAS,KAC/B6C,EAASjC,EAAqB,CAAEV,UAAU,KAC1C2C,EAASlC,EAAgB,CAAEgB,YAAa,CAAEG,QAAOD,MAAOmC,EAAQ5D,QAc9DkE,aAXwB,WACtB/C,EAAMvB,SACR6C,EAASlC,EAAgB,CAAEgB,YAAa,CAAEG,QAAOD,MAAOmC,EAAQ5D,QAUhEmE,cAAe,kBAAM3B,GAAY,IACjC4B,QAASR,EAAQQ,QACjBC,QAAST,EAAQS,QACjBd,UAAWe,IAAWd,IAAOC,QAAR,eAAoBD,IAAO1D,SAAWA,IAC3D4D,MAAO,CAAE/B,WAAYiC,EAAQjC,YAT/B,UAWGoC,GAA6B,SAAjBH,EAAQzD,MACnB,cAAC,EAAD,CACEoC,MAAOqB,EAAQ1D,QACfyB,WAAYiC,EAAQjC,WACpBD,MAAOA,EACPD,MAAOmC,EAAQ5D,GACfwC,YAAaA,KAGfuB,GAAYH,EAAQ1D,YCjFfqE,EAAkB,SAACxE,EAAiB2B,GAC/C,IAAM8C,EAAWzE,EAAK,GAAKA,EAAK,GAAGE,KAAKwE,OAAS,EAE3CC,EAAkB,CACtB1E,GAAI0B,EAAQ,EACZzB,KAAM0E,MAAMH,GACTI,KAAKhD,GACLiD,KAAI,SAAC3C,EAAK4C,GAAN,mBAAC,eAAqB5C,GAAtB,IAA2BlC,GAAI8E,EAAQ,QAG1CC,EAAUhF,EAAK8E,KAAI,SAAC9C,GACxB,OAAIA,EAAI/B,GAAK0B,EACJ,2BAAKK,GAAZ,IAAiB/B,GAAI+B,EAAI/B,GAAK,IAEzB+B,KAKT,OAFAgD,EAAQC,OAAOtD,EAAO,EAAGgD,GAElBK,G,iBCIME,EAhBsB,SAAC,GAAe,IAAbvD,EAAY,EAAZA,MAAY,EACtBjC,IAAMiD,WAAWlD,GAArCiD,EAD0C,EAC1CA,SAAUtB,EADgC,EAChCA,MAMlB,OACE,qBAAKoC,UAAWC,IAAOC,QAAvB,SACE,wBAAQF,UAAWC,IAAO0B,UAAWC,QANhB,WACvB1C,EAAS9B,EAAW,CAAEZ,KAAMwE,EAAgBpD,EAAMpB,KAAM2B,OAKtD,kB,iBCKS0D,EAbgB,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAChC,OACE,qBAAI3B,MAAO,CAAE4B,OAAQD,EAAQC,QNXP,IMWtB,UACE,oBAAI/B,UAAWC,IAAO+B,QAAtB,SACE,cAAC,EAAD,CAAQ7D,MAAO2D,EAAQrF,OAExBqF,EAAQpF,KAAK4E,KAAI,SAAC3C,GAAD,OAChB,cAAC,EAAD,CAAkB0B,QAAS1B,EAAKR,MAAO2D,EAAQrF,IAArCkC,EAAIlC,W,gBCkBPwF,EAvBsB,SAAC,GAAD,MACnCC,EADmC,EACnCA,SACAN,EAFmC,EAEnCA,QACA/B,EAHmC,EAGnCA,OACAG,EAJmC,EAInCA,UACAG,EALmC,EAKnCA,MALmC,IAMnCgC,cANmC,aAOnCC,gBAPmC,gBASnC,wBACEA,SAAUA,EACVR,QAASA,EACT/B,OAAQA,EACRG,UAAWe,IAAWd,IAAOC,QAASF,GAAjB,mBAClBC,IAAOkC,OAASA,GADE,cAElBlC,IAAOmC,SAAWA,GAFA,IAIrBjC,MAAOA,EART,SAUG+B,KCNUG,EArBS,WAAO,IAAD,EACwBnG,IAAMoE,SAAS,GADvC,mBACrBgC,EADqB,KACDC,EADC,OAEArG,IAAMiD,WAAWlD,GAArC2B,EAFoB,EAEpBA,MAAOsB,EAFa,EAEbA,SAEfhD,IAAMoD,WAAU,WACdiD,EPqBwB,SAACjG,GAC3B,GAAIA,EAAeyB,OAASzB,EAAe2B,IAAK,CAC9C,IAAMa,EAAQP,EAASjC,EAAeyB,MAAOzB,EAAe2B,KAE5D,OACGa,EAAMN,IAAIE,IAAMI,EAAMN,IAAIC,IAAM,IAAMK,EAAMH,IAAID,IAAMI,EAAMH,IAAIF,IAAM,GAI3E,OAAO,EO9BiB+D,CAAa5E,EAAMtB,mBACxC,CAACsB,IAMJ,OACE,6BACE,wBAAQwE,SAAUE,GAAsB,EAAGV,QAN1B,YCHE,SAAChE,EAAmBsB,GAAiC,IACpE5C,EAAyBsB,EAAzBtB,eAAgBE,EAASoB,EAATpB,KAExB,GAAIF,EAAe2B,KAAO3B,EAAeyB,MAAO,CAC9C,IAAMe,EAAQP,EAASjC,EAAeyB,MAAOzB,EAAe2B,KACtD4C,EAAU/B,EAAMH,IAAID,IAAM,EAAII,EAAMH,IAAIF,IACxCqC,EAAUhC,EAAMN,IAAIE,IAAM,EAAII,EAAMN,IAAIC,IACxCgE,EAAY,CAAEjE,IAAKM,EAAMN,IAAIC,IAAKE,IAAKG,EAAMH,IAAIF,KAEnDoC,EAAU,IACZrE,EAAKiG,EAAUjE,IAAM,GAAG9B,KAAK+F,EAAU9D,IAAM,GAAGkC,QAAUA,GAGxDC,EAAU,IACZtE,EAAKiG,EAAUjE,IAAM,GAAG9B,KAAK+F,EAAU9D,IAAM,GAAGmC,QAAUA,GAG5DtE,EAAKkG,SAAQ,SAAClE,GACZA,EAAI9B,KAAO8B,EAAI9B,KAAK4E,KAAI,SAAC3C,GACvB,OACEC,EACEtC,EAAeyB,MACfzB,EAAe2B,IACf,CACEE,MAAOK,EAAI/B,GACXyB,MAAOS,EAAIlC,MAGbgG,EAAUjE,MAAQA,EAAI/B,IAAMgG,EAAU9D,MAAQA,EAAIlC,GAK/CkC,EAHE,2BAAKA,GAAZ,IAAiB9B,SAAS,UAOhCqC,EAAS9B,EAAW,CAAEZ,UACtB0C,EAAS/B,MDlCTwF,CAAU/E,EAAOsB,IAKf,sB,gBE8BS0D,EAzCoB,WAAO,IAAD,EACX1G,IAAMiD,WAAWlD,GAArC2B,EAD+B,EAC/BA,MAAOsB,EADwB,EACxBA,SAET2D,EAAqB,SAACC,GAC1B,GAAIlF,EAAMtB,eAAeyB,OAASH,EAAMtB,eAAe2B,IAAK,CAC1D,IAAMa,EAAQP,EACZX,EAAMtB,eAAeyB,MACrBH,EAAMtB,eAAe2B,KAGvBiB,EACE5B,EAAoB,CAClBa,MAAOW,EAAMN,IAAIC,IACjBP,MAAOY,EAAMH,IAAIF,IACjBL,WAAY0E,OAMpB,OACE,qBAAI9C,UAAWC,IAAOC,QAAtB,UACE,sDACA,sBAAKF,UAAWC,IAAO8C,OAAvB,UACE,wBACEnB,QAAS,kBAAMiB,OAAmBG,IAClChD,UAAWe,IAAWd,IAAOgD,YAAahD,IAAOiD,eAElD5E,EAAkBgD,KAAI,SAACwB,GAAD,OACrB,wBACElB,QAAS,kBAAMiB,EAAmBC,IAElC3C,MAAO,CAAE/B,WAAY0E,GACrB9C,UAAWC,IAAOgD,aAFbH,aCvCF,MAA0B,oC,gBC8C1BK,EArCiB,WAAO,IAC7BvF,EAAU1B,IAAMiD,WAAWlD,GAA3B2B,MAD4B,EAEJ1B,IAAMoE,WAFF,mBAE7B8C,EAF6B,KAEnBC,EAFmB,OAGRnH,IAAMoE,UAAkB,GAHhB,mBAG7BgD,EAH6B,KAGrBC,EAHqB,KAK9BC,ECZuB,SAC7BC,EACAC,GACwB,IAAD,GAC8BA,GAAW,IAAxDC,kBADe,MACF,CAAC,YAAa,cADZ,EAGjBhE,EAAMzD,SAAgB,MAkB5B,OAhBAA,aAAgB,WACd,IAAM0H,EAAc,SAACC,GACflE,EAAId,UAAYc,EAAId,QAAQiF,SAASD,EAAMnE,SAC7C+D,EAASI,IAMb,OAFAF,EAAWjB,SAAQ,SAACqB,GAAD,OAAUC,SAASC,iBAAiBF,EAAMH,MAEtD,WACLD,EAAWjB,SAAQ,SAACqB,GAAD,OACjBC,SAASE,oBAAoBH,EAAMH,SAGtC,CAACH,EAAUE,IAEPhE,EDZSwE,EAAkC,kBAAMZ,GAAU,MAUlE,OARArH,IAAMoD,WAAU,WACV1B,EAAMtB,eAAeyB,OAASH,EAAMtB,eAAe2B,KACrDoF,EEVyB,SAC7BtF,EACAE,GAEA,IAAMa,EAAQP,EAASR,EAAOE,GACxBmG,EAAOJ,SAASK,eAAT,cAA+BvF,EAAMN,IAAIC,IAAzC,YAAgDK,EAAMH,IAAIF,MAEvE,OAAI2F,EACK,CACLE,IAAKF,EAAKG,UAAY,EACtBC,KAAMJ,EAAKK,WAAa,GAIrB,CACLH,IAAK,EACLE,KAAM,GFLFE,CAAgB9G,EAAMtB,eAAeyB,MAAOH,EAAMtB,eAAe2B,QAGpE,CAACL,IAECA,EAAMtB,eAAeC,SAKxB,sBAAKyD,UAAWC,IAAOC,QAASC,MAAOiD,EAAvC,UACE,cAAC,EAAD,CACExB,QAAS,kBAAM2B,GAAWD,IAC1BtD,UAAWC,IAAO0E,cAFpB,SAIE,qBAAKC,IAAKC,EAAMC,IAAI,OAErBxB,GACC,qBAAItD,UAAWC,IAAO8E,KAAMpF,IAAK6D,EAAjC,UACE,cAAC,EAAD,IACA,cAAC,EAAD,UAdC,MGtBEwB,EAAyB,SACpCxI,EACA0B,GAFoC,OAIpC1B,EAAK8E,KAAI,SAAC9C,GACR,IAAMyG,EAAUzG,EAAI9B,KAAK4E,KAAI,SAAC3C,GAC5B,OAAIA,EAAIlC,GAAKyB,EACJ,2BAAKS,GAAZ,IAAiBlC,GAAIkC,EAAIlC,GAAK,IAEzBkC,KAGHuG,EAAM,aAAKzI,GAAIyB,EAAQ,GAAMG,GAInC,OAFA4G,EAAQxD,OAAOvD,EAAO,EAAGgH,GAElB,2BACF1G,GADL,IAEE9B,KAAMuI,Q,oBCKGE,GAhBsB,SAAC,GAAe,IAAbjH,EAAY,EAAZA,MAAY,EACtBhC,IAAMiD,WAAWlD,GAArCiD,EAD0C,EAC1CA,SAAUtB,EADgC,EAChCA,MAMlB,OACE,qBAAKoC,UAAWC,KAAOC,QAAvB,SACE,wBAAQF,UAAWC,KAAO0B,UAAWC,QANnB,WACpB1C,EAAS9B,EAAW,CAAEZ,KAAMwI,EAAuBpH,EAAMpB,KAAM0B,OAK7D,kB,oBCeSkH,GA5BW,WAAO,IACvBxH,EAAU1B,IAAMiD,WAAWlD,GAA3B2B,MADsB,EAEN1B,IAAMoE,SAAc,IAFd,mBAEvB5D,EAFuB,KAEjB2I,EAFiB,KAY9B,OARAnJ,IAAMoD,WAAU,WACd+F,EACEjE,MFaqB,SAAC5E,GAC1B,IAAI8I,EAAQ,EAQZ,OANA9I,EAAKkG,SAAQ,SAAClE,GACRA,EAAI9B,KAAKwE,OAASoE,IACpBA,EAAQ9G,EAAI9B,KAAKwE,WAIdoE,EEtBGC,CAAY3H,EAAMpB,OACrB6E,KAAK,IACLC,KAAI,SAAC3C,EAAK4C,GAAN,mBAAC,eAAqB5C,GAAtB,IAA2BlC,GAAI8E,UAEvC,CAAC3D,IAECA,EAAMpB,KAAK0E,OAKd,+BACE,oBAAIf,MAAO,CAAEqF,MAAO,MACnB9I,EAAK4E,KAAI,SAAC3C,EAAU4C,GAAX,OACR,oBAAiBvB,UAAWC,KAAO+B,QAAnC,SACE,cAAC,GAAD,CAAQ9D,MAAOqD,EAAQ,KADhB5C,EAAIlC,UAPV,M,oBCwBIgJ,GA9BoB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACzBxJ,IAAMyJ,WAAWpI,EAAcpB,GADN,mBAC5CyB,EAD4C,KACrCsB,EADqC,KASnD,OANAhD,IAAMoD,WAAU,WACVoG,GAAgC,oBAAbA,GACrBA,EAAS9H,EAAMpB,QAEhB,CAACoB,EAAO8H,IAGT,cAACzJ,EAAa2J,SAAd,CAAuB5G,MAAO,CAAEE,WAAUtB,SAA1C,SACE,sBAAKoC,UAAWC,KAAOC,QAAvB,UACE,uBACEF,UAAWe,IAAWd,KAAO4F,MAAR,eAClB5F,KAAO6F,SAAWlI,EAAMpB,KAAK0E,SAFlC,SAKE,kCACE,cAAC,GAAD,IACCtD,EAAMpB,KAAK8E,KAAI,SAAC9C,GAAD,OACd,cAAC,EAAD,CAAkBsD,QAAStD,GAAjBA,EAAI/B,YAIpB,cAAC,EAAD,UC1BOsJ,OARf,WACE,OACE,qBAAK/F,UAAU,MAAf,SACE,cAAC,GAAD,OCFNgG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFlC,SAASK,eAAe,W","file":"static/js/main.c5c159ee.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ChangeBackground_wrapper__2Uwxj\",\"colors\":\"ChangeBackground_colors__Je-TV\",\"colorButton\":\"ChangeBackground_colorButton__2QEDl\",\"transparent\":\"ChangeBackground_transparent__mqomV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Button_wrapper__pj90c\",\"active\":\"Button_active__FWtIw\",\"disabled\":\"Button_disabled__1AAMG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"SelectionMenu_wrapper__2E3fb\",\"settingButton\":\"SelectionMenu_settingButton__2RZd1\",\"menu\":\"SelectionMenu_menu__3_fZg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Table_wrapper__2oJSk\",\"table\":\"Table_table__3Cw9e\",\"filled\":\"Table_filled__wq5i1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Col_wrapper__3FddR\",\"selected\":\"Col_selected__29n3t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"AddRow_wrapper__3NW4Q\",\"addButton\":\"AddRow_addButton__1hGob\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"AddCol_wrapper__OkM3j\",\"addButton\":\"AddCol_addButton__2VG6f\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"TextEdit_wrapper__3ANjp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"techCol\":\"Row_techCol__HSNZB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"TechRow_wrapper__2hFdh\",\"techCol\":\"TechRow_techCol__2RW0-\"};","import * as React from \"react\";\nimport { SketchContext as SketchContextType } from \"./types\";\n\nexport const TableContext = React.createContext<SketchContextType>(\n  null as any\n);\n","import { TableState } from \"./types\";\n\nconst tableState: TableState = {\n  editableCol: 0,\n  touched: false,\n  selectionState: {\n    selected: false,\n  },\n  rows: [\n    {\n      id: 1,\n      cols: [\n        {\n          content: \"\",\n          type: \"text\",\n          display: true,\n          id: 1,\n        },\n        {\n          content: \"\",\n          type: \"text\",\n          display: true,\n          id: 2,\n        },\n      ],\n    },\n  ],\n};\n\nexport default tableState;\n","import { createStandardAction } from \"typesafe-actions\";\nimport { PositionStateType, RowType } from \"./types\";\n\nexport const setStartSelection = createStandardAction(\n  \"TABLE/SET_START_SELECTION\"\n)<{\n  positionStart: PositionStateType;\n}>();\n\nexport const setEndSelection = createStandardAction(\"TABLE/SET_END_SELECTION\")<{\n  positionEnd: PositionStateType;\n}>();\n\nexport const setSelectedSelection = createStandardAction(\n  \"TABLE/SET_SELECTED_SELECTION\"\n)<{ selected: boolean }>();\n\nexport const setTouched = createStandardAction(\"TABLE/SET_TOUCHED\")<{\n  touched: boolean;\n}>();\n\nexport const clearSelection = createStandardAction(\"TABLE/CLEAR_SELECTION\")();\n\nexport const rowsUpdate = createStandardAction(\"TABLE/ROWS_UPDATE\")<{\n  rows: RowType[];\n}>();\n\nexport const updateColContent = createStandardAction(\n  \"TABLE/UPDATE_COL_CONTENT\"\n)<{\n  rowId: number;\n  colId: number;\n  content: string;\n}>();\n\nexport const updateColBackground = createStandardAction(\n  \"TABLE/UPDATE_COL_BACKGROUND\"\n)<{\n  rowId: number;\n  colId: number;\n  background: string | undefined;\n}>();\n","import { createReducer, ActionType } from \"typesafe-actions\";\nimport initialState from \"./state\";\nimport * as actions from \"./actions\";\nimport * as Types from \"./types\";\n\ntype Action = ActionType<typeof actions>;\n\nconst tableReducer = createReducer<Types.TableState, Action>(initialState)\n  .handleAction(\n    actions.setStartSelection,\n    (state, { payload: { positionStart } }) => ({\n      ...state,\n      selectionState: {\n        ...state.selectionState,\n        start: positionStart,\n      },\n    })\n  )\n  .handleAction(\n    actions.setEndSelection,\n    (state, { payload: { positionEnd } }) => ({\n      ...state,\n      selectionState: {\n        ...state.selectionState,\n        end: positionEnd,\n      },\n    })\n  )\n  .handleAction(actions.setTouched, (state, { payload: { touched } }) => ({\n    ...state,\n    touched,\n  }))\n  .handleAction(\n    actions.setSelectedSelection,\n    (state, { payload: { selected } }) => ({\n      ...state,\n      selectionState: {\n        ...state.selectionState,\n        selected,\n      },\n    })\n  )\n  .handleAction(actions.clearSelection, (state) => ({\n    ...state,\n    selectionState: {\n      selected: false,\n    },\n  }))\n  .handleAction(actions.rowsUpdate, (state, { payload: { rows } }) => ({\n    ...state,\n    rows,\n  }))\n  .handleAction(\n    actions.updateColContent,\n    (state, { payload: { colId, rowId, content } }) => {\n      const { rows } = state;\n\n      rows[rowId - 1].cols[colId - 1].content = content;\n\n      return {\n        ...state,\n        rows,\n      };\n    }\n  )\n  .handleAction(\n    actions.updateColBackground,\n    (state, { payload: { colId, rowId, background } }) => {\n      const { rows } = state;\n\n      rows[rowId - 1].cols[colId - 1].background = background;\n\n      return {\n        ...state,\n        rows,\n      };\n    }\n  );\n\nexport default tableReducer;\n","export const emptyCol = { content: \"\", type: \"text\", display: true };\n\nexport const ROW_HEIGHT = 45;\n\nexport const BACKGROUND_COLORS = [\n  \"#fff1b8\",\n  \"#ffffb8\",\n  \"#f4ffb8\",\n  \"#d9f7be\",\n  \"#b5f5ec\",\n  \"#bae7ff\",\n  \"#d6e4ff\",\n  \"#efdbff\",\n  \"#ffccc7\",\n];\n","import { PositionStateType, RangeType, SelectionStateType } from \"./types\";\n\nexport const getRange = (\n  start: PositionStateType,\n  end: PositionStateType\n): RangeType => ({\n  row: {\n    min: start.rowId < end.rowId ? start.rowId : end.rowId,\n    max: start.rowId < end.rowId ? end.rowId : start.rowId,\n  },\n  col: {\n    min: start.colId < end.colId ? start.colId : end.colId,\n    max: start.colId < end.colId ? end.colId : start.colId,\n  },\n});\n\nexport const belongs = (\n  start: PositionStateType,\n  end: PositionStateType,\n  current: PositionStateType\n): boolean => {\n  const range = getRange(start, end);\n\n  return (\n    current.rowId >= range.row.min &&\n    current.rowId <= range.row.max &&\n    current.colId >= range.col.min &&\n    current.colId <= range.col.max\n  );\n};\n\nexport const getCellCount = (selectionState: SelectionStateType): number => {\n  if (selectionState.start && selectionState.end) {\n    const range = getRange(selectionState.start, selectionState.end);\n\n    return (\n      (range.row.max - range.row.min + 1) * (range.col.max - range.col.min + 1)\n    );\n  }\n\n  return 0;\n};\n","import React, { useRef } from \"react\";\nimport { updateColContent } from \"../../../../duck/actions\";\nimport { TableContext } from \"../../../../duck/context\";\nimport styles from \"./TextEdit.module.css\";\n\ninterface TextEditType {\n  value: string;\n  rowId: number;\n  colId: number;\n  background?: string;\n  setEditMode: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nconst TextEdit: React.FC<TextEditType> = ({\n  value,\n  colId,\n  rowId,\n  background,\n  setEditMode,\n}) => {\n  const { dispatch } = React.useContext(TableContext);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  React.useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, []);\n\n  const editHandler = (e: any) => {\n    dispatch(updateColContent({ rowId, colId, content: e.target.value }));\n    setEditMode(false);\n  };\n\n  const keyDownHandler = (e: any) => {\n    if (e.code === \"Enter\") {\n      editHandler(e);\n    }\n  };\n\n  return (\n    <input\n      ref={inputRef}\n      defaultValue={value}\n      onBlur={editHandler}\n      onKeyDown={keyDownHandler}\n      className={styles.wrapper}\n      style={{ background }}\n    />\n  );\n};\n\nexport default TextEdit;\n","import React, { useRef } from \"react\";\nimport classNames from \"classnames\";\nimport { ColType as ColDataType } from \"../../duck/types\";\nimport { TableContext } from \"../../duck/context\";\nimport {\n  clearSelection,\n  setEndSelection,\n  setSelectedSelection,\n  setStartSelection,\n  setTouched,\n} from \"../../duck/actions\";\nimport { belongs } from \"../../duck/utils\";\nimport styles from \"./Col.module.css\";\nimport { TextEdit } from \"./components\";\n\ninterface ColType {\n  colData: ColDataType;\n  rowId: number;\n}\n\nconst Col: React.FC<ColType> = ({ colData, rowId }) => {\n  const [selected, setSelected] = React.useState<boolean>(false);\n  const [editMode, setEditMode] = React.useState<boolean>(false);\n  const { state, dispatch } = React.useContext(TableContext);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  React.useEffect(() => {\n    if (state.selectionState.start && state.selectionState.end) {\n      setSelected(\n        belongs(state.selectionState.start, state.selectionState.end, {\n          rowId,\n          colId: colData.id,\n        })\n      );\n    } else {\n      setSelected(false);\n    }\n  }, [state, rowId, colData, inputRef]);\n\n  if (!colData.display) {\n    return null;\n  }\n\n  const selectStartHandler = () => {\n    dispatch(clearSelection());\n    dispatch(setTouched({ touched: true }));\n    dispatch(\n      setStartSelection({ positionStart: { rowId, colId: colData.id } })\n    );\n  };\n\n  const selectEndHandler = () => {\n    dispatch(setTouched({ touched: false }));\n    dispatch(setSelectedSelection({ selected: true }));\n    dispatch(setEndSelection({ positionEnd: { rowId, colId: colData.id } }));\n  };\n\n  const selectUpdateHandler = () => {\n    if (state.touched) {\n      dispatch(setEndSelection({ positionEnd: { rowId, colId: colData.id } }));\n    }\n  };\n\n  return (\n    <td\n      id={`col-${rowId}-${colData.id}`}\n      onMouseDown={selectStartHandler}\n      onMouseUp={selectEndHandler}\n      onMouseEnter={selectUpdateHandler}\n      onDoubleClick={() => setEditMode(true)}\n      colSpan={colData.colSpan}\n      rowSpan={colData.rowSpan}\n      className={classNames(styles.wrapper, { [styles.selected]: selected })}\n      style={{ background: colData.background }}\n    >\n      {editMode && colData.type === \"text\" && (\n        <TextEdit\n          value={colData.content}\n          background={colData.background}\n          rowId={rowId}\n          colId={colData.id}\n          setEditMode={setEditMode}\n        />\n      )}\n      {!editMode && colData.content}\n    </td>\n  );\n};\n\nexport default Col;\n","import { emptyCol } from \"../../../../../duck/constants\";\nimport { RowType } from \"../../../../../duck/types\";\n\nexport const generateNewRows = (rows: RowType[], rowId: number): RowType[] => {\n  const colCount = rows[0] ? rows[0].cols.length : 1;\n\n  const newRow: RowType = {\n    id: rowId + 1,\n    cols: Array(colCount)\n      .fill(emptyCol)\n      .map((col, index) => ({ ...col, id: index + 1 })),\n  };\n\n  const newRows = rows.map((row: RowType) => {\n    if (row.id > rowId) {\n      return { ...row, id: row.id + 1 };\n    }\n    return row;\n  });\n\n  newRows.splice(rowId, 0, newRow);\n\n  return newRows;\n};\n","import React from \"react\";\nimport { TableContext } from \"../../../../duck/context\";\nimport { rowsUpdate } from \"../../../../duck/actions\";\nimport { generateNewRows } from \"./duck/utils\";\nimport styles from \"./AddRow.module.css\";\n\ninterface AddRowType {\n  rowId: number;\n}\n\nconst AddRow: React.FC<AddRowType> = ({ rowId }) => {\n  const { dispatch, state } = React.useContext(TableContext);\n\n  const addNewRowHandler = () => {\n    dispatch(rowsUpdate({ rows: generateNewRows(state.rows, rowId) }));\n  };\n\n  return (\n    <div className={styles.wrapper}>\n      <button className={styles.addButton} onClick={addNewRowHandler}>\n        +\n      </button>\n    </div>\n  );\n};\n\nexport default AddRow;\n","import React from \"react\";\nimport { RowType as RowDataType, ColType } from \"../../duck/types\";\nimport { ROW_HEIGHT } from \"../../duck/constants\";\nimport Col from \"../col\";\nimport { AddRow } from \"./components\";\nimport styles from \"./Row.module.css\";\n\ninterface RowType {\n  rowData: RowDataType;\n}\n\nconst Row: React.FC<RowType> = ({ rowData }) => {\n  return (\n    <tr style={{ height: rowData.height || ROW_HEIGHT }}>\n      <td className={styles.techCol}>\n        <AddRow rowId={rowData.id} />\n      </td>\n      {rowData.cols.map((col: ColType) => (\n        <Col key={col.id} colData={col} rowId={rowData.id} />\n      ))}\n    </tr>\n  );\n};\n\nexport default Row;\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport styles from \"./Button.module.css\";\n\ninterface ButtonType {\n  onClick?: () => any;\n  onBlur?: () => any;\n  className?: string;\n  active?: boolean;\n  style?: any;\n  disabled?: boolean;\n}\n\nconst Button: React.FC<ButtonType> = ({\n  children,\n  onClick,\n  onBlur,\n  className,\n  style,\n  active = false,\n  disabled = false,\n}) => (\n  <button\n    disabled={disabled}\n    onClick={onClick}\n    onBlur={onBlur}\n    className={classNames(styles.wrapper, className, {\n      [styles.active]: active,\n      [styles.disabled]: disabled,\n    })}\n    style={style}\n  >\n    {children}\n  </button>\n);\n\nexport default Button;\n","import React from \"react\";\nimport { TableContext } from \"../../../../duck/context\";\nimport { getCellCount } from \"../../../../duck/utils\";\nimport { mergeCols } from \"./duck/operations\";\n\nconst Merge: React.FC = () => {\n  const [selectedCellCounts, setSelectedCellCounts] = React.useState(0);\n  const { state, dispatch } = React.useContext(TableContext);\n\n  React.useEffect(() => {\n    setSelectedCellCounts(getCellCount(state.selectionState));\n  }, [state]);\n\n  const mergeHandler = () => {\n    mergeCols(state, dispatch);\n  };\n\n  return (\n    <li>\n      <button disabled={selectedCellCounts <= 1} onClick={mergeHandler}>\n        Merge\n      </button>\n    </li>\n  );\n};\n\nexport default Merge;\n","import {\n  AnyDispatch,\n  ColType,\n  PositionStateType,\n  RowType,\n  TableState,\n} from \"../../../../../duck/types\";\nimport { belongs, getRange } from \"../../../../../duck/utils\";\nimport { clearSelection, rowsUpdate } from \"../../../../../duck/actions\";\n\nexport const mergeCols = (state: TableState, dispatch: AnyDispatch): void => {\n  const { selectionState, rows } = state;\n\n  if (selectionState.end && selectionState.start) {\n    const range = getRange(selectionState.start, selectionState.end);\n    const colSpan = range.col.max + 1 - range.col.min;\n    const rowSpan = range.row.max + 1 - range.row.min;\n    const targetCol = { row: range.row.min, col: range.col.min };\n\n    if (colSpan > 1) {\n      rows[targetCol.row - 1].cols[targetCol.col - 1].colSpan = colSpan;\n    }\n\n    if (rowSpan > 1) {\n      rows[targetCol.row - 1].cols[targetCol.col - 1].rowSpan = rowSpan;\n    }\n\n    rows.forEach((row: RowType) => {\n      row.cols = row.cols.map((col: ColType) => {\n        if (\n          belongs(\n            selectionState.start as PositionStateType,\n            selectionState.end as PositionStateType,\n            {\n              rowId: row.id,\n              colId: col.id,\n            }\n          ) &&\n          !(targetCol.row === row.id && targetCol.col === col.id)\n        ) {\n          return { ...col, display: false };\n        }\n\n        return col;\n      });\n    });\n\n    dispatch(rowsUpdate({ rows }));\n    dispatch(clearSelection());\n  }\n};\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport { BACKGROUND_COLORS } from \"../../../../duck/constants\";\nimport { TableContext } from \"../../../../duck/context\";\nimport { updateColBackground } from \"../../../../duck/actions\";\nimport { getRange } from \"../../../../duck/utils\";\nimport styles from \"./ChangeBackground.module.css\";\n\nconst ChangeBackground: React.FC = () => {\n  const { state, dispatch } = React.useContext(TableContext);\n\n  const changeColorHandler = (color: string | undefined) => {\n    if (state.selectionState.start && state.selectionState.end) {\n      const range = getRange(\n        state.selectionState.start,\n        state.selectionState.end\n      );\n\n      dispatch(\n        updateColBackground({\n          rowId: range.row.min,\n          colId: range.col.min,\n          background: color,\n        })\n      );\n    }\n  };\n\n  return (\n    <li className={styles.wrapper}>\n      <button>Background color</button>\n      <div className={styles.colors}>\n        <button\n          onClick={() => changeColorHandler(undefined)}\n          className={classNames(styles.colorButton, styles.transparent)}\n        />\n        {BACKGROUND_COLORS.map((color: string) => (\n          <button\n            onClick={() => changeColorHandler(color)}\n            key={color}\n            style={{ background: color }}\n            className={styles.colorButton}\n          />\n        ))}\n      </div>\n    </li>\n  );\n};\n\nexport default ChangeBackground;\n","export default __webpack_public_path__ + \"static/media/setting.5524b19c.svg\";","import React from \"react\";\nimport { TableContext } from \"../../duck/context\";\nimport { getMenuPosition, PositionType } from \"./duck/utils\";\nimport { useOutsideClick } from \"../../duck/hooks\";\nimport Button from \"../button\";\nimport { Merge, ChangeBackground } from \"./components\";\nimport icon from \"./assets/setting.svg\";\nimport styles from \"./SelectionMenu.module.css\";\n\nconst SelectionMenu: React.FC = () => {\n  const { state } = React.useContext(TableContext);\n  const [position, setPosition] = React.useState<PositionType>();\n  const [opened, setOpened] = React.useState<boolean>(false);\n\n  const menuRef = useOutsideClick<HTMLUListElement>(() => setOpened(false));\n\n  React.useEffect(() => {\n    if (state.selectionState.start && state.selectionState.end) {\n      setPosition(\n        getMenuPosition(state.selectionState.start, state.selectionState.end)\n      );\n    }\n  }, [state]);\n\n  if (!state.selectionState.selected) {\n    return null;\n  }\n\n  return (\n    <div className={styles.wrapper} style={position}>\n      <Button\n        onClick={() => setOpened(!opened)}\n        className={styles.settingButton}\n      >\n        <img src={icon} alt=\"\" />\n      </Button>\n      {opened && (\n        <ul className={styles.menu} ref={menuRef}>\n          <ChangeBackground />\n          <Merge />\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default SelectionMenu;\n","import * as React from \"react\";\n\nexport const useOutsideClick = <T extends HTMLElement>(\n  callback: (event: Event) => void,\n  options?: { eventNames: string[] }\n): React.RefObject<T> => {\n  const { eventNames = [\"mousedown\", \"touchstart\"] } = options || {};\n\n  const ref = React.useRef<T>(null);\n\n  React.useEffect(() => {\n    const handleEvent = (event: Event): void => {\n      if (ref.current && !ref.current.contains(event.target as Node)) {\n        callback(event);\n      }\n    };\n\n    eventNames.forEach((name) => document.addEventListener(name, handleEvent));\n\n    return () => {\n      eventNames.forEach((name) =>\n        document.removeEventListener(name, handleEvent)\n      );\n    };\n  }, [callback, eventNames]);\n\n  return ref;\n};\n","import { getRange } from \"../../../duck/utils\";\nimport { PositionStateType } from \"../../../duck/types\";\n\nexport interface PositionType {\n  top: number;\n  left: number;\n}\n\nexport const getMenuPosition = (\n  start: PositionStateType,\n  end: PositionStateType\n): PositionType => {\n  const range = getRange(start, end);\n  const cell = document.getElementById(`col-${range.row.min}-${range.col.min}`);\n\n  if (cell) {\n    return {\n      top: cell.offsetTop + 5,\n      left: cell.offsetLeft + 5,\n    };\n  }\n\n  return {\n    top: 0,\n    left: 0,\n  };\n};\n","import { ColType, RowType } from \"../../../duck/types\";\nimport { emptyCol } from \"../../../duck/constants\";\n\nexport const generateRowsWithNewCol = (\n  rows: RowType[],\n  colId: number\n): RowType[] =>\n  rows.map((row: RowType) => {\n    const newCols = row.cols.map((col: ColType) => {\n      if (col.id > colId) {\n        return { ...col, id: col.id + 1 };\n      }\n      return col;\n    });\n\n    const newCol = { id: colId + 1, ...emptyCol };\n\n    newCols.splice(colId, 0, newCol);\n\n    return {\n      ...row,\n      cols: newCols,\n    };\n  });\n\nexport const getColCount = (rows: RowType[]): number => {\n  let count = 0;\n\n  rows.forEach((row: RowType) => {\n    if (row.cols.length > count) {\n      count = row.cols.length;\n    }\n  });\n\n  return count;\n};\n","import React from \"react\";\nimport { TableContext } from \"../../../../duck/context\";\nimport { rowsUpdate } from \"../../../../duck/actions\";\nimport { generateRowsWithNewCol } from \"../../duck/utils\";\nimport styles from \"./AddCol.module.css\";\n\ninterface AddColType {\n  colId: number;\n}\n\nconst AddCol: React.FC<AddColType> = ({ colId }) => {\n  const { dispatch, state } = React.useContext(TableContext);\n\n  const addColHandler = (): void => {\n    dispatch(rowsUpdate({ rows: generateRowsWithNewCol(state.rows, colId) }));\n  };\n\n  return (\n    <div className={styles.wrapper}>\n      <button className={styles.addButton} onClick={addColHandler}>\n        +\n      </button>\n    </div>\n  );\n};\n\nexport default AddCol;\n","import React from \"react\";\nimport { TableContext } from \"../../duck/context\";\nimport { getColCount } from \"./duck/utils\";\nimport { AddCol } from \"./components\";\nimport styles from \"./TechRow.module.css\";\n\nconst TechRow: React.FC = () => {\n  const { state } = React.useContext(TableContext);\n  const [cols, setCols] = React.useState<any>([]);\n\n  React.useEffect(() => {\n    setCols(\n      Array(getColCount(state.rows))\n        .fill({})\n        .map((col, index) => ({ ...col, id: index }))\n    );\n  }, [state]);\n\n  if (!state.rows.length) {\n    return null;\n  }\n\n  return (\n    <tr>\n      <td style={{ width: 10 }} />\n      {cols.map((col: any, index: number) => (\n        <td key={col.id} className={styles.techCol}>\n          <AddCol colId={index + 1} />\n        </td>\n      ))}\n    </tr>\n  );\n};\n\nexport default TechRow;\n","import React from \"react\";\nimport { TableContext } from \"./duck/context\";\nimport tableState from \"./duck/state\";\nimport tableReducer from \"./duck/reducer\";\nimport { RowType } from \"./duck/types\";\nimport { Row, SelectionMenu, TechRow } from \"./components\";\nimport styles from \"./Table.module.css\";\nimport classNames from \"classnames\";\n\ninterface TableType {\n  onChange?: (rows: RowType[]) => any;\n}\n\nconst Table: React.FC<TableType> = ({ onChange }) => {\n  const [state, dispatch] = React.useReducer(tableReducer, tableState);\n\n  React.useEffect(() => {\n    if (onChange && typeof onChange === \"function\") {\n      onChange(state.rows);\n    }\n  }, [state, onChange]);\n\n  return (\n    <TableContext.Provider value={{ dispatch, state }}>\n      <div className={styles.wrapper}>\n        <table\n          className={classNames(styles.table, {\n            [styles.filled]: !!state.rows.length,\n          })}\n        >\n          <tbody>\n            <TechRow />\n            {state.rows.map((row: RowType) => (\n              <Row key={row.id} rowData={row} />\n            ))}\n          </tbody>\n        </table>\n        <SelectionMenu />\n      </div>\n    </TableContext.Provider>\n  );\n};\n\nexport default Table;\n","import React from 'react';\nimport { Table } from \"./components\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Table />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}